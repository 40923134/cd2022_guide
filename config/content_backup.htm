<h1>About</h1>
<p>本導引倉儲: <a href="https://github.com/mdecourse/cd2022_guide">https://github.com/mdecourse/cd2022_guide</a></p>
<p>本導引網站: <a href="https://mde.tw/cd2022_guide">https://mde.tw/cd2022_guide</a></p>
<p>課程倉儲與網站:</p>
<h4>何謂協同?</h4>
<p style="padding-left: 30px;">若以拔河為例, "合作" (Cooperation) 的層次在多人參與既定的拔河活動, 過程中有許多傳統的實體集合練習, 最終目的則是能夠在傳統拔河活動中勝出.</p>
<p style="padding-left: 30px;">在 cd2022 課程的定義下, "協同" (Collaborative) 設計的層次則希望能夠在"合作"的架構下, 納入更多的創新思維, 探討能否讓多人參與拔河活動, 各自在不同地理位置, 能在虛實整合與機電資架構的合成設計下, 讓多人進行一場公平的拔河活動, 且讓夢想成真的一隊得以克敵制勝.</p>
<p style="padding-left: 30px;"><a href="/downloads/Collaboration, Coordination, and Cooperation Among Organizations - Establishing the Distinctive Meanings of These Terms Through a Systematic Literature Review.pdf">Collaboration, Coordination, and Cooperation Among Organizations - Establishing the Distinctive Meanings of These Terms Through a Systematic Literature Review.pdf</a></p>
<h4>課程倉儲與網站:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/cd2022">https://github.com/mdecourse/cd2022</a></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cd2022">https://mde.tw/cd2022</a></p>
<h4>Week1:</h4>
<h4 style="padding-left: 30px;">網路設定:</h4>
<p style="padding-left: 60px;">由於目前電腦輔助設計室中的電腦只要將網路連接到系上的主幹 (因為課程要全面在純 IPv6 網段上運作), 直接連外, 電腦中就會有蠕蟲程式啟動攻擊, 造成操作系統所安裝的防毒軟體為了防堵惡意攻擊而關閉網路連線.</p>
<p style="padding-left: 60px;">為因應上述問題, 可以在切換至連外網段後, 將系統的代理主機自動偵測關閉, 且自行設定能夠支援 IPv6 與 IPv4 的代理主機, 並且關閉網路卡的 IPv4 網路協定, 就可以避開惡意軟體的攻擊.</p>
<p style="padding-left: 60px;">若要在開機後, 防毒軟體啟動前, 以批次檔案的執行, 自動完成上述三項設定, 可以參考:</p>
<p style="padding-left: 90px;">電腦輔助設計室 <a href="https://github.com/mdecourse/wcm2022/discussions/2">IPv6 網路設定</a></p>
<h4 style="padding-left: 30px;">分組:</h4>
<p style="padding-left: 60px;">利用 Ethercalc 收集各班學員的 Github 帳號與組別, 存入 <a href="https://github.com/mdecourse/studlist/tree/main/2022spring">https://github.com/mdecourse/studlist/tree/main/2022spring</a></p>
<p style="padding-left: 60px;">各學員若 github 帳號有更動, 可以自行至 <a href="https://github.com/mdecourse/studlist">https://github.com/mdecourse/studlist</a> 倉儲, 以 pull requests 進行修改.</p>
<p style="padding-left: 60px;">以 2b 為例, 每一大組 8 人, 且分為兩個 4 人小組, 目前可以透過 <a href="http://mde.tw/studlist/2022spring/2b.txt">http://mde.tw/studlist/2022spring/2b.txt</a> 讀取. 且透過 <a href="/downloads/read_data_from_nfulist.py">read_data_from_nfulist.py</a> 可以在近端讀取各班學員的 github 帳號與組別.</p>
<p style="padding-left: 60px;">目前碰到的問題是:</p>
<p style="padding-left: 90px;">能不能透過隨機方式自動幫尚未納組的學員分組?</p>
<p style="padding-left: 120px;">參考: <a href="https://mde.tw/cd2022_guide/content/run.html?src=https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/47ba006b45b227bc1135542f91adcc025f3f2590/grp_2022.py">grp_2022</a></p>
<p style="padding-left: 90px;">能不能直接在網站上顯示出各學員的 cd2022 課程倉儲與網站?</p>
<h4 style="padding-left: 30px;">下載課程工具:</h4>
<p style="padding-left: 60px;">協同產品設計實習課程將會用到 NX1980, 若在電腦輔助設計室, 可以直接從 <a href="http://wcm.cycu.org:88/">http://wcm.cycu.org:88/</a> 下載.</p>
<h4 style="padding-left: 30px;">讀取各學員每週工作內容:</h4>
<p style="padding-left: 60px;">當完成分組後, 且各學員已經透過各自 Github 帳號下的 cd2022 倉儲開始執行課程任務後, 能否透過程式逐日或逐週讀取各學員的工作內容?</p>
<h4 style="padding-left: 30px;">課程第一階段要求:</h4>
<p style="padding-left: 60px;">每一個大組都要設法提供 solvespace, NX1980 格式的 <a href="https://cad.onshape.com/documents/21d631bfd9ab509e3a2079c0/w/832791ed26ad65d49a0711b4/e/6957bf222554da36040535be">uarm</a> (Onshape 格式) 機械手臂零組件.</p>
<div id="disqus_thread"></div>
<script>
/**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://https-mde-tw-eng.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<h2>IPv6</h2>
<p>電腦輔助設計室 <a href="https://github.com/mdecourse/wcm2022/discussions/2">IPv6 網路設定</a></p>
<p><a href="https://www.tipo.gov.tw/tw/cp-180-219597-bf26c-1.html">智慧財產局學校行政與電算中心篇</a></p>
<p><a href="https://www.netadmin.com.tw/netadmin/zh-tw/snapshot/484F7B4D900C4BDF988F0D6AAE2A8706">如何避免惡意軟體的侵害</a>?</p>
<h4>問題:</h4>
<p style="padding-left: 30px;">為何不使用 NAT 機制, 而讓電腦輔助設計室中的電腦直接連上外部網路?</p>
<p style="padding-left: 30px;">使用 IPv6 連網有哪些好處? 有沒有壞處?</p>
<p style="padding-left: 30px;">如何使用批次檔案完成 IPv6 網路設定, 避開惡意軟體的網路攻擊?</p>
<p></p>
<h2>Grouping</h2>
<p><a href="https://mde.tw/cd2022">cd2022</a> 課程由學員自行分組, 每四人為一小組, 每兩小組組成一大組.</p>
<p>所有課程指定內容可由各小組組員討論 (每週至少開會一次, 且將小組討論過程與結論放入各小組分組倉儲) 後, 在個人所負責的項目執行完成後, 先納入個人 cd2022 倉儲後, 再依照組序整合至該小組組長的協同倉儲 (例如: 甲班第一大組的第一小組倉儲名稱將為: cd2022ag1-1, 甲班第一大組的第二小組倉儲名稱將為: cd2022ag1-2).</p>
<p>各大組成員每兩週在上課之前必須至少開會一次, 且將大組討論過程與結論放入各大組分組倉儲後 (例如: 甲班第一大組的倉儲名稱將為: cd2022ag1), 比較並統整各小組所完成的內容後, 將協同設計結果納入各大組的分組倉儲, 且各大組每兩週將利用課程時間進行網際協同分組簡報.</p>
<h4 style="padding-left: 30px;">問題:</h4>
<p style="padding-left: 60px;">為什麼需要定期進行分組簡報?</p>
<p style="padding-left: 60px;"><a href="/downloads/The Importance of Presentation Skills in Institutions of Higher Learning.pdf">The Importance of Presentation Skills in Institutions of Higher Learning.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/The 7 Main Reasons Why People Give Presentations.pdf">The 7 Main Reasons Why People Give Presentations.pdf</a></p>
<p>以下 Brython 程式可讀取各大組的學員分組資料後, 直接在網頁中列出各學員 cd2022 倉儲與網頁連結、各小組協同倉儲與網頁連結、以及各大組協同倉儲與網頁連結.</p>
<p>請注意: 各組學員 github 帳號下除建有個人 cd2022 倉儲外, 還必須 fork 大組倉儲 (例如: 甲班第一大組的倉儲名稱將為: cd2022ag1) 並在各大組進行網際協同分組簡報前, 與所屬大組的分組協同倉儲內容保持同步.</p>
<p><a href="https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/c7043ac81005b069c58080c1222fe30048d588cb/grp_2022.py">grp_2022.py</a> (<a href="https://mde.tw/cd2022_guide/content/run.html?src=https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/c7043ac81005b069c58080c1222fe30048d588cb/grp_2022.py">run</a>)</p>
<h3>Pull requests</h3>
<p><a href="https://mde.tw/cd2022">cd2022</a> (cd 為 collaborative design 縮寫) 協同產品設計實習課程的修課學員名單、Github 帳號與大組分組組別資料, 以 Tab (即 \t) 隔開 (<a href="https://github.com/mdecourse/studlist/blob/main/2022spring/2a.txt">2a.txt</a> 與 <a href="https://github.com/mdecourse/studlist/blob/main/2022spring/2b.txt">2b.txt</a>), 採用倉儲儲存, 再透過 Github Pages, 能讓任何成員從全球資訊網介面:</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/studlist/2022spring/2a.txt">http://mde.tw/studlist/2022spring/2a.txt</a> </p>
<p style="padding-left: 30px;"><a href="http://mde.tw/studlist/2022spring/2b.txt">http://mde.tw/studlist/2022spring/2b.txt</a> </p>
<p>讀取資料內容.</p>
<p>採用 Github 存放各班學員相關資料的好處, 是可以讓學員自行透過 Pull Requests 的方式協同管理資料內容, 除能讓資料始終保持正確外版本. 當學員的 Github 帳號或組別有異動時, 能夠自行維護並留下改版紀錄.</p>
<p>協同產品設計流程中最重要的概念是: 如何運用各種永續的方法, 讓產品設計的各階段工具與終端產品, 皆能採有效率的方式因應可能遭遇的變化.</p>
<hr/>
<p>利用 wcm2022 帳號修改 <a href="https://github.com/mdecourse/studlist">https://github.com/mdecourse/studlist</a> 中的組別資料, 作為 pull request 範例.</p>
<p>動態網頁嵌入 Wink 影片的參考 html: <a href="/downloads/2a_w3_studlist_pull_requests_wink_html.txt">2a_w3_studlist_pull_requests_wink_html.txt</a></p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/2a_w3_studlist_pull_requests.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div><h2>Assignments</h2>
<p>協同產品設計實習課程學員評分要點:</p>
<p>sustainable (永續):</p>
<p style="padding-left: 30px;">1 : capable of being sustained (可持續)</p>
<p style="padding-left: 30px;">2a : of, relating to, or being a method of harvesting (獲取成果) or using a resource (運用資源) so that the resource (該資源) is not depleted (不致枯竭) or permanently damaged (永久損壞).</p>
<p style="padding-left: 30px;">2b : of or relating to a lifestyle involving the use of sustainable methods (採取永續的生活方式)</p>
<p style="padding-left: 30px;">在 cd2022 課程 sustainable 代表所採行的解題方式, <span style="background-color: #ffff99;">為所有分組組員認可是當下環境中, 最佳處理方式與流程, 可作為其他分組學習並能在課程各階段任務中延續使用</span>.</p>
<p>resilience (應變能力):</p>
<p style="padding-left: 30px;">1 : the capability of a strained body (承受應變物體) to recover its size and shape after deformation caused especially by compressive stress (尤指受到壓縮應力)</p>
<p style="padding-left: 30px;">2 : an ability to recover (回復能力) from or adjust easily (易於調適) to misfortune or change (面臨意外情境或變化)</p>
<p style="padding-left: 30px;">在 cd2022 課程 resilience 代表<span style="background-color: #ffff99;">各分組成員需具備一定的應變處理能力</span>.</p>
<p>20220302 工作流程:</p>
<ol>
<li>將 cadlab 網路連線接到系 backbone (使用純 IPv6 設定後, 為了連結到 IPv4 網站, 必須透過雙協定支援的 proxy server)</li>
<li>將兩個隨身碟放入電腦 USB 3.0 插槽 (與 2.0 速度差 10 倍)</li>
<li>啟動電腦</li>
<li>在 Windows 10 尚未啟動防毒軟體之前, 以系統管理員身分執行 1_ipv6_network_setup.bat (為了避開蠕蟲惡意的網路攻擊)</li>
<li>批次檔案將會開啟 Firefox 連結到 cd2022 課程網頁與倉儲</li>
<li>希望修改 cmsimde 倉儲內容, 以 git clone --recurse-submodules git@github.com:mdecourse/cmsimde.git 取下倉儲資料時, 電腦回報沒有 correct access rights</li>
<li>上個步驟表示 putty session github.com 並沒有設定, 可帶出上週在 cdb 從 registry 匯出的 2022_cdb.reg, 直接以滑鼠點擊執行後, 再次執行 git clone --recurse-submodules git@github.com:mdecourse/cmsimde.git 取下 cmsimde 倉儲</li>
<li>但 cmsimde 無法直接產生靜態網頁與動態網頁, 因此以 cmsimde_site 倉儲納入 cmsimde 程式碼, 進行修改後, 將資料回應至 cmsimde</li>
<li>需要新增 github 倉儲, 因此必須登入 github.com 建立 cmsimde_site 倉儲 (能不能直接在近端使用 ssh 與程式建立 github 倉儲?)</li>
<li>因為要取 2a 學員 github 帳號, 以 ssh 登入 .17 電腦, 啟動 ethercalc</li>
<li>由於必須從教務主機取得 2a 學員學號, 經由 heroku 雲端主機取得 <a href="https://nfulist.herokuapp.com/?semester=1102&amp;courseno=0752&amp;column=True">https://nfulist.herokuapp.com/?semester=1102&amp;courseno=0752&amp;column=True</a></li>
<li>連接至 cd2022 gitter, 告知擷取 2a github 帳號的 ethercalc 表單連結</li>
<li>cd2022 要求每一學員必須在 github 帳號下建立 cd2022 倉儲與網頁, 並且由各小組組長建立 cd2022ag1-1 (為第一組第一小組), 且每位學員在 cd2022ag1-1 都擁有 git push 權限, 或採 pull requests 方式修改小組分組倉儲內容</li>
<li>而每一大組的組長負責建立 cd2022ag1 (為 2a 第一大組為例) 後, 各大組學員對分組倉儲可以擁有 git push 權限, 或各學員採 pull requests 方式修改大分組倉儲內容</li>
<li>各學員在每週會議後, 個人所負責完成的內容或簡報必須先放到個人的 cd2022 倉儲後, 再透過小組協同倉儲練習如何解決組員間提交內容的衝突後, 再整合至各大組的協同倉儲.</li>
<li>接著要從 ethercalc 取下 2a 學員的 github 帳號與大組分組資料, 並存入 studlist 倉儲 (能不能用程式協助?)</li>
</ol>
<p id="2aw2">2a w2 assignments:</p>
<p>1. 在個人帳號下, 使用<a href="https://github.com/mdecourse/cmsimde/tree/9efabe7ab2fc4952f9255cf30b3856695514b3ee">最新版的 cmsimde</a> 建立 cd2022:</p>
<p style="padding-left: 30px;">以子模組的方式建立倉儲:</p>
<p style="padding-left: 60px;">git submodule add https://github.com/mdecourse/cmsimde.git cmsimde</p>
<p style="padding-left: 30px;">或者直接將 cmsimde 倉儲作為 cmsimde 目錄:</p>
<p style="padding-left: 60px;">git clone --recurse-submodules https://github.com/mdecourse/cmsimde.git</p>
<p style="padding-left: 30px;">然後再將沒有 git 版本資料的 cmsimde 目錄放到個人倉儲.</p>
<p>2. 根據 <a href="https://mde.tw/cd2022_guide/content/Grouping.html">https://mde.tw/cd2022_guide/content/Grouping.html</a>  中的 2b 程式執行, 配合 <a href="https://mde.tw/studlist/2022spring/2a.txt">https://mde.tw/studlist/2022spring/2a.txt</a> 修改為能夠直接在頁面顯示各組員的 cd2022 倉儲與網頁連結, 以及各學員協同大分組倉儲與網頁連結 (例如: cd2022ag1).<br/><br/>3. 能否透過 github api 程式 (也可以逐一進入各班組員 github 帳號, 以手動查驗後, 以表格列出結果), 列出 w2 階段各組員帳號下 cd2022 與 cd2022ag1 (以 2a 第一組組員為例) 是否符合陽春的 cmsimde_site 內容. (例如: 透過 <a href="https://github.com/PyGithub/PyGithub">https://github.com/PyGithub/PyGithub</a>)</p>
<h4>2bw2:</h4>
<p>建立個人 cd2022 與 cd2022bg1 (以 2b 第一大組為例) 時, 可以用 import <a href="https://github.com/mdecourse/cmsimde_site">cmsimde_site</a> 倉儲 (但 history 將會是 mdecourse 而非學員), 或 git submodule add 或直接將 cmsimde 下載 <a href="https://github.com/mdecourse/cmsimde/archive/refs/heads/master.zip">https://github.com/mdecourse/cmsimde/archive/refs/heads/master.zip</a> 後解開為倉儲下的 cmsimde 目錄, 之後再將 up_dir 內容複製到倉儲根目錄. 當評分檢查時, 各大組需繳交全班各學員是否達成任務要求.</p>
<p>cd2022 w2 任務 1:</p>
<p style="padding-left: 30px;">請各組利用一個小時建立一個欄位以 tab 隔開的 txt 檔案, 欄位標題分別為學號, 個人倉儲, 大分組倉儲排列, 按照各班學員學號順序 (<a href="https://nfulist.herokuapp.com/?semester=1102&amp;courseno=0752&amp;column=True">2a 修課學員</a>, <a href="https://nfulist.herokuapp.com/?semester=1102&amp;courseno=0764&amp;column=True">2b 修課學員</a>). 完成後請各大組將結果回應至 <a href="https://github.com/mdecourse/cd2022/discussions/16">2b w2 討論區</a>.</p>
<h3>各週任務</h3>
<h4>w2 任務:</h4>
<h4 style="padding-left: 30px;">問題緣起:</h4>
<p style="padding-left: 60px;">第二週的任務<a href="https://mde.tw/cd2022_guide/content/Assignments.html#2aw2">啟動源頭</a>來自課程實際分組時所產生的問題.</p>
<p style="padding-left: 60px;">各班利用 Ethercalc 表單同步輸入 github 帳號與組別時, 將資料存入 <a href="https://github.com/mdecourse/studlist">https://github.com/mdecourse/studlist</a> 倉儲.</p>
<p style="padding-left: 60px;">經由 Github Pages 設定後, 可由 <a href="https://mde.tw/studlist/2022spring/2a.txt">https://mde.tw/studlist/2022spring/2a.txt</a> 讀取甲班的學員帳號及分組資料 (各欄位以 tab 隔開), 而從 <a href="https://mde.tw/studlist/2022spring/2b.txt">https://mde.tw/studlist/2022spring/2b.txt</a> 則可讀取乙班的學員帳號及分組資料.</p>
<h4 style="padding-left: 30px;">指定任務:</h4>
<p style="padding-left: 60px;">請學員以全球資訊網頁的 URL 讀取各班資料後, 是否能夠以永續便捷的方式取得已經選好組別的<span style="background-color: #ffff99;">學員學號</span>、學員<span style="background-color: #ffff99;">個人倉儲連結</span>、學員<span style="background-color: #ffff99;">個人網站</span>、各組位於學員帳號下的<span style="background-color: #ffff99;">大組倉儲</span>以及各學員帳號下各大組的<span style="background-color: #ffff99;">協同網站</span>.</p>
<p style="padding-left: 60px;">而針對尚未填入 github 帳號的學員, 以其學號作為其 github 帳號. 針對尚未列出分組序號的學員, 則委由隨機方式編入尚不足 8 名學員的組別, 若各組已經都補滿 8 名學員, 仍餘有尚未分組的學員時, 則採隨機方式從各班第一組依序補入各組後, 分別在個人及大分組的 w2 標題頁面中, 列出各大組與全班的上述要求資料.</p>
<h4>w3 任務:</h4>
<h4 style="padding-left: 30px;">問題緣起:</h4>
<p style="padding-left: 60px;">w2 完成分組後, 各組即進入利用 NX1980 繪製 uArm 機械手臂的協同設計階段, 其中包括手臂兩側的正齒輪減速機設計, 以及各連桿與組立所需要的其他組件設計等 (完成圖如 <a href="https://cad.onshape.com/documents/21d631bfd9ab509e3a2079c0/w/832791ed26ad65d49a0711b4/e/6957bf222554da36040535be">Onshape 中的 uArm 組立圖</a>).</p>
<p style="padding-left: 60px;">uArm 機械手臂的初步設計目的, 是完成 NX1980 組立圖後, 能轉入 Coppeliasim 環境中進行機電系統組合模擬, 讓操作者透過 <a href="https://www.coppeliarobotics.com/helpFiles/en/customUIPlugin.htm">Custom UIs 介面</a>操控四個自由度的 uArm 步進伺服馬達.</p>
<h4 style="padding-left: 30px;">指定任務:</h4>
<p style="padding-left: 60px;"><a href="https://mde.tw/cd2022_guide/content/NX1980.html#learnnx">這裡</a>有 38 個比較接近 NX1980 版本功能的教學影片 (<a href="https://www.youtube.com/watch?v=GUaa97tALxE&amp;list=PLzEsJue49U_EMMv0eBo8MNJjJOq_WHCrl">連結</a>), 請以每一學員分配 5 個影片的原則, 由各學員在 w3 標題頁面中, 根據影片中的教學內容, 以 Wink 影片互相對照的方式採 NX1980 執行操作進行整理, 完成後請將所負責的 Wink 教學影片嵌入個人與大分組的 w3 標題頁面中.</p>
<p><span style="background-color: #ffff99;">w4 各班上課時段前</span>, 請各小組與大組成員分別開會討論後, 採協同設計流程執行上述任務, 並準備在 w4 上課時段中直接利用網頁簡報呈現各大組的執行流程與結果.</p><h2>Revealjs</h2>
<p><a href="https://revealjs.com/">https://revealjs.com/</a> 是一個 Javascript 程式框架, 可用來建立全球資訊網上的簡報.</p>
<p><a href="https://github.com/hakimel/reveal.js">https://github.com/hakimel/reveal.js</a> 引用了許多 Javascript 程式庫, 這些程式庫的改版非常頻繁, 經常造成改版頻率相對緩慢的 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 經常收到來自 Github 的改版通知.</p>
<p>因此在利用 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 建立 cd2022 課程網站與大分組網站時, 若要直接使用 Reveal.js 建立線上簡報, 就必須將 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 的 reveal 目錄內容保持在最新的 Reveal.js 版本.</p>
<p><a href="https://github.com/mdecourse/cmsimde_site">https://github.com/mdecourse/cmsimde_site</a> 就是用於開發 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 的倉儲. cmsimde_site 的 main 分支直接將 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 內容放入 cmsimde 目錄, 可以直接根據需求修改其中的任何內容, 當測試無誤後(尚未使用 <a href="https://docs.python.org/3/library/unittest.html">unittest</a>), 將改版內容反應至 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 後, 將在 cmsimde_site 倉儲中的 submodule 分支中進行測試.</p>
<p>由於 cmsimde_site 的 main 分支直接將 cmsimde 當作子目錄, 而 submodule 分支則將 cmsimde 當作子模組. 從 main 分支切換到 submodule, 由於需要同時取下 cmsimde 子模組資料, 因此使用:</p>
<p style="padding-left: 30px;">git checkout -f submodule --recurse-submodules</p>
<p>而從 submodule 分支切換回 main 分支, 則使用:</p>
<p style="padding-left: 30px;">git checkout -f main</p>
<p><a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 倉儲中的 config/reveal.leo 使用 <a href="https://leoeditor.com/">Leo Editor</a> 編輯各簡報頁面內容. reveal.leo 中包含 demo.html 中的各種簡報應用, 使用者可以從 Leo Editor 專案中取出所需的簡報頁面進行編輯.</p><h2>Meeting</h2>
<p><a href="https://www.atlassian.com/blog/teamwork/how-to-run-effective-meetings">https://www.atlassian.com/blog/teamwork/how-to-run-effective-meetings</a></p>
<p><a href="https://sloanreview.mit.edu/article/the-surprising-science-behind-successful-remote-meetings/">https://sloanreview.mit.edu/article/the-surprising-science-behind-successful-remote-meetings/</a> </p>
<p><a href="https://www.nytimes.com/guides/business/how-to-run-an-effective-meeting">https://www.nytimes.com/guides/business/how-to-run-an-effective-meeting</a> </p>
<p><a href="https://hbr.org/1976/03/how-to-run-a-meeting">https://hbr.org/1976/03/how-to-run-a-meeting</a> </p>
<p><a href="https://slack.com/blog/productivity/run-effective-meetings">https://slack.com/blog/productivity/run-effective-meetings</a> </p>
<p><a href="https://www.scoro.com/blog/tips-for-effective-meeting-management/">https://www.scoro.com/blog/tips-for-effective-meeting-management/</a> </p><h1>Solvespace</h1>
<p>根據 <a href="https://mde.tw/cad2021/content/Compile%20Solvespace.html">https://mde.tw/cad2021/content/Compile%20Solvespace.html</a> 中的說明, 可以利用 <a href="https://drive.google.com/file/d/16L08jH3ZtoMeeGWBJrP9DuIk-cby_Wqw/view?usp=sharing">compile_copsim_for_cd2022.7z</a> (file size: 5 GB, extracted size: 17.3 GB), 完成編譯.</p>
<p>自行編譯 Solvespace 的目的是希望透過 <a href="https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm">https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm</a> 與 <a href="https://www.coppeliarobotics.com/helpFiles/en/importExport.htm">https://www.coppeliarobotics.com/helpFiles/en/importExport.htm</a> 的資訊, 自行在 Solvespace 中將組立檔案直接轉入 Coppeliasim 的場景檔案. 其中牽涉如何將 Solvespace 組立件中的零件檔案進行分割後, 以 <a href="https://en.wikipedia.org/wiki/STL">STL</a>、<a href="http://wiki.ros.org/urdf">URDF</a> 或 <a href="http://sdformat.org/">SDF</a> 格式直接轉入 Coppeliasim.</p><h1>NX1980</h1>
<h4>NX1980 參考頁面:</h4>
<p style="padding-left: 30px;">有關 Siemens NX 的歷史, 請參考 <a href="https://en.wikipedia.org/wiki/Siemens_NX">https://en.wikipedia.org/wiki/Siemens_NX</a></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cd2022/content/NX1980.html">https://mde.tw/cd2022/content/NX1980.html</a></p>
<p style="padding-left: 30px;">假如在系上網段, 可直接從 <a href="http://wcm.cycu.org:88">http://wcm.cycu.org:88</a> 下載 <a href="http://wcm.cycu.org:88/NX1980_cd2022.7z">http://wcm.cycu.org:88/NX1980_cd2022.7z</a>.</p>
<p style="padding-left: 30px;"><a href="http://wcm.cycu.org:88">http://wcm.cycu.org:88</a> 中目前有三個與可攜 Python 程式有關的檔案, 有何差別, 建立的目的為何?</p>
<p style="padding-left: 60px;"><span style="background-color: #ffff99;">請注意: 以下的 .7z 檔案下載, 只允許在系上網段上下載</span>.</p>
<p style="padding-left: 60px;"><a href="http://wcm.cycu.org:88/compile_copsim_cd2022.7z">compile_copsim_cd2022.7z</a> (file size: 5 GB, extracted size: 17.3 GB, 包含除了 NX1980 之外的所有課程相關可攜程式套件, 是專門為 <a href="https://mde.tw/cd2022">cd2022</a> 課程學員打造的套件).</p>
<p style="padding-left: 60px;"><a href="http://wcm.cycu.org:88/portable_python_wcm2022.7z">portable_python_wcm2022.7z</a> (file size: 513 MB, extracted size: 17.3 G, 這是專門為 <a href="https://mde.tw/wcm2022">wcm2022</a> 課程打造的可攜程式套件, 適合選修學員下載後在任何 Windows 10 中以隨身碟啟動後操作)</p>
<p style="padding-left: 60px;"><a href="http://wcm.cycu.org:88/drive.7z">drive.7z</a> (file size: 2.6 MB, extracted size: 10 MB, 只包含 PUTTY, tcc, wscite 與 tmp 目錄, 採用 Hybrid 方式設定, 可與目前電腦輔助設計室中 SSD 硬碟所安裝的 Python 3.9.5 與 <a href="https://git-scm.com/download/win">Portablegit</a> 結合, 使用者只需自行設定啟動後的 home_ipv6 目錄與 home_ipv6/Desktop 目錄後即可以最輕薄便捷的方式將 SSH key 存入隨身碟, 並將個人與分組倉儲存入隨身碟啟動後的 tmp 目錄進行操作).</p>
<h4 style="padding-left: 30px;">問題:</h4>
<p style="padding-left: 60px;"><a href="http://wcm.cycu.org:88">http://wcm.cycu.org:88</a> 是如何建置的? (採純 IPv6 設定, 且只允許特定網段下載)</p>
<p style="padding-left: 90px;">使用 <a href="https://nginx.org/">Nginx</a>, 採用如下設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">worker_processes  1;
events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server {
        # port 80 僅開啟 IPv6 網路連線
        listen       [::]:80 default ipv6only=on;
        # 伺服器的符號名稱
        server_name  xxx.xxxx.xxx;
        return       301 https://$server_name$request_uri;
    }

   server {
       # 同時開啟 IPv4 與 IPv6 連線, port 設為 88
        listen       [::]:88 ipv6only=off;
        listen       88;
       # 允許系上 IPv4 網段連線
        allow 140.xxx.xx.0/24;
       # 允許特定單一 IPv4 電腦連線
        allow xxx.xxx.xxx.xx;
       # 允許系上 IPv6 網段連線
        allow 2001:xxx:xxxx:xx::0/32;
       # 其餘網段禁止連線
        deny all;
        location / {
            # 根目錄設定
            root X:/xxxxxx/xxxx/spring2022;
            }
        # 開啟 autoindex, 連線後會列出目錄下所有檔案內容
        autoindex on;
    }
}</pre>
<p style="padding-left: 60px;">可攜 NX1980 是如何建立的?</p>
<p style="padding-left: 90px;">利用 <a href="https://github.com/Bioruebe/UniExtract2">UniExtract2</a> 將 NX1980 安裝檔案解開後, 透過批次檔案設定啟動.</p>
<p style="padding-left: 60px;">如何讓 NX1980 認證伺服器 IPv6 相容?</p>
<p style="padding-left: 90px;">開啟伺服器的 IPv6 網路連線.</p>
<p style="padding-left: 60px;">Siemens NX 套件更新頻率?</p>
<p style="padding-left: 90px;">請參見 <a href="https://docs.plm.automation.siemens.com/tdoc/nx/1899/updating_nx_installation/#uid:index_xid1688897">Updating the NX Installation</a>.</p>
<p style="padding-left: 90px;">每 6 個月釋出一個大改版, 每個月則各有一次小改版.</p>
<p style="padding-left: 90px;">NX1980 為 2021/06 釋出的版本. 目前 2022/03 最新版本為 2007 系列 (<a href="https://www.youtube.com/watch?v=zjPQcJF94-E">What's new 2022/02 影片</a>), 其他各版資訊請參考 <a href="https://nxcadtips.com/docs/list-of-nx-versions-with-documentation-links/">https://nxcadtips.com/docs/list-of-nx-versions-with-documentation-links/</a></p>
<p style="padding-left: 60px;">如何學習利用 NX1980 進行 3D 零組件設計繪圖?</p>
<p style="padding-left: 90px;"><a href="https://docs.plm.automation.siemens.com/tdoc/nx/1847/nx_help">NX1847 nx_help</a></p>
<p style="padding-left: 90px;"><a href="https://docs.sw.siemens.com/en-US/release/209349590/NX%201980%20Series">NX1980 線上 Documentation</a></p>
<p style="padding-left: 90px;"><a href="https://www.youtube.com/watch?v=GUaa97tALxE&amp;list=PLzEsJue49U_EMMv0eBo8MNJjJOq_WHCrl">NX1855-1919 零組件設計繪圖</a>教學影片</p>
<p style="padding-left: 120px;">此一系列教學影片共有 38 個影片檔, 請各大組學員分別認領五個教學影片後, 以 Wink 製作教學影片後, 先將影片放入各自的 cd2022 網站中的 NX1980 H1 頁面中, 然後再整合至各小組與大組的協同網站中.</p>
<p style="padding-left: 120px;">有關電腦輔助設計室 IPv6 網路設定流程, 可以利用手機參考<a href="https://mde.tw/wcm2022_guide/content/IPv6%20setup.html">設定教學</a>後, 利用隨身碟中的<a href="https://github.com/mdecourse/wcm2022/discussions/2">批次檔案</a>進行設定.</p>
<p style="padding-left: 120px;">此階段的 NX1980 uArm 機械手臂零組件繪圖目的, 希望能以 NX1980 繪製 uArm (<a href="https://cad.onshape.com/documents/21d631bfd9ab509e3a2079c0/w/832791ed26ad65d49a0711b4/e/6957bf222554da36040535be">Onshpae 中的 uArm 組立檔</a>, 使用者可以在手機中安裝 Onshpe App (<a href="https://play.google.com/store/apps/details?id=com.onshape.app">Android</a>, <a href="https://apps.apple.com/us/app/onshape-3d-cad/id923421284">iPhone</a>) 後開啟 uArm 組立檔)</p>
<p style="padding-left: 60px;">NX1980 如何取得啟動授權?</p>
<p style="padding-left: 90px;">系上購買的 NX1980 教育版是透過網路連線取得啟動授權, 意即啟動 NX1980 時, 必須連接到系上的伺服器取得授權後, 才能開啟.</p>
<p style="padding-left: 90px;">假如是在校外, 可以透過 IPv4 或 IPv6 網路連線取得授權, 若在協同產品設計實習上課時段, 則只能透過 IPv6 協定連網, 因此使用者可以在 start_NX1980.bat 多台授權伺服器如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">set SPLM_LICENSE_SERVER=port@IPv4_server_address;port@[IPv6_server_address]</pre>
<p style="padding-left: 90px;">就能同時在不同網路連線情況下, 啟動 NX1980.</p>
<p style="padding-left: 90px;">以下的 bat 檔案, 能夠同時啟動 Python, Msys2 以及 NX1980:</p>
<p style="padding-left: 120px;"><a href="/downloads/start_ipv6_nx1980_bat.txt">start_ipv6_nx1980_bat.txt</a></p>
<p style="padding-left: 120px;">其中 Msys2 可用來編譯 Solvespace、SciTE、Fossil SCM 以及 CoppeliaSim, Python 可用來啟動個人動態與靜態網頁, 並透過 Leo Editor 編輯 Reveal.js 簡報.</p><h1>Onshape</h1>
<p>以 <a href="https://cad.onshape.com/documents/21d631bfd9ab509e3a2079c0/w/832791ed26ad65d49a0711b4/e/6957bf222554da36040535be">Onshape 中的 uArm robot</a>. (並未自行繪製零組件而是從 <a href="/downloads/uArmSwiftPro_UP1300_3D.STEP">uArmSwiftPro_UP1300_3D.STEP</a> import)</p>
<h1>Tic-Tat-Toe</h1>
<p><a href="https://www.universal-robots.com/products/ur10-robot/">UR10e</a> Robot 透過影像辨識與人進行 <a href="https://en.wikipedia.org/wiki/Tic-tac-toe">Tic-Tat-Toe</a> 遊戲:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/e1qtmZxMd6A" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://mde.tw/cd2022">cd2022</a> 則希望透過 <a href="https://www.ufactory.cc/pages/uarm">uArm</a> robot 搬動 OX 棋子的方式進行 <a href="https://en.wikipedia.org/wiki/Tic-tac-toe">Tic-Tat-Toe</a> 遊戲.</p>
<h4 style="padding-left: 30px;">Tic-Tat-Toe:</h4>
<p style="padding-left: 60px;"><a href="https://www.cormerica.com/robot-tic-tac-toe/">https://www.cormerica.com/robot-tic-tac-toe/</a></p>
<p style="padding-left: 60px;"><a href="/downloads/Playing_Tic-Tac-Toe_Using_Genetic_Neural_Network_with_Double_transfer_functions.pdf">Playing_Tic-Tac-Toe_Using_Genetic_Neural_Network_with_Double_transfer_functions.pdf</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/eSUk08d5Zjc" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/w5Oftm3l2uQ" title="YouTube video player" width="560"></iframe></p>
<h4 style="padding-left: 30px;">uArm 資料:</h4>
<p style="padding-left: 60px;"><a href="https://www.trossenrobotics.com/uarm-swift-pro.aspx">https://www.trossenrobotics.com/uarm-swift-pro.aspx</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/uArm-Developer/UArmForArduino">https://github.com/uArm-Developer/UArmForArduino</a></p>
<p style="padding-left: 60px;"><a href="https://uarm-developer.github.io/UArmForArduino/">https://uarm-developer.github.io/UArmForArduino/</a></p>
<p>且 uArm robot 的零組件要求分別由 Solvespace, NX1980 與 Onshape 執行設計繪圖後轉入 Coppeliasim 場景完成機電資系統模擬.</p>
<p>其中 uArm 原型零件採用 3D 列印或雷射切割的製造過程可依照 <a href="https://mde.tw/cd2022/content/Realizable.html">Realization</a> 頁面中的模擬系統進行, 並包括齒輪減速機的設計運算與 <a href="https://wokwi.com/arduino/libraries/Servo/Sweep">Arduino 伺服馬達的控制模擬</a>.</p>
<h4>uArm 零組件:</h4>
<p style="padding-left: 30px;">以 <a href="https://cad.onshape.com/documents/21d631bfd9ab509e3a2079c0/w/832791ed26ad65d49a0711b4/e/6957bf222554da36040535be">Onshape 中的 uArm robot</a>. (並未自行繪製零組件而是從 <a href="/downloads/uArmSwiftPro_UP1300_3D.STEP">uArmSwiftPro_UP1300_3D.STEP</a> import)</p>
<h2>Threejs</h2>
<p><a href="https://threejs.org/">https://threejs.org/</a></p>
<p><iframe frameborder="0" height="300" src="/downloads/threejs_ex/index.html" width="300"></iframe></p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/en/externalFrontEnd.htm">https://www.coppeliarobotics.com/helpFiles/en/externalFrontEnd.htm</a></p>
<p></p>
<p></p><h1>run</h1>
<script src="/static/brython.js">
</script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<!-- Cango 程式庫 -->
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<!-- for Konva 程式庫 -->
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><button id="add1to100">add 1 to 100</button><button id="p261">p261</button><button id="rocflag">ROC flag</button><button id="procflag">PROC flag</button><button id="usaflag">USA flag</button><button id="drawgrid">Draw Grid</button><button id="grid_rect">Random Rect</button><button id="rect_walk">Rect Walk</button><button id="rect_u_walk">Rect U Walk</button><button id="rect_rev_u_walk">Rect rev U Walk</button><button id="sgcr">單節貪食蛇</button><button id="cfrr">5 個紅點方塊</button><button id="snake">Snake</button><button id="bsnake">BSnake</button><button id="auto_guess">auto_guess</button><button id="ball">ball</button><button id="bezier">bezier</button><button id="big_lotto">big_lotto</button><button id="brython_kw">brython_kw</button><button id="bunny">bunny</button><button id="cango_spur">cango_spur</button><button id="cango_spur1">cango_spur1</button><button id="cango_three_gears">cango_three_gears</button><button id="clear">clear</button><button id="clock">clock</button><button id="convert_temp">convert_temp</button><button id="deepmerge">deepmerge</button><button id="display_stl">display_stl</button><button id="draw">draw</button><button id="ex1">ex1</button><button id="ex2">ex2</button><button id="ex3">ex3</button><button id="ex4">ex4</button><button id="fibo">fibo</button><button id="fourbar">fourbar</button><button id="grp2a_2022">grp2a_2022</button><button id="grp_2022">grp_2022</button><button id="guess_a_number">guess_a_number</button><button id="hw1_1">hw1_1</button><button id="hw1_2">hw1_2</button><button id="keycode">Keycode</button><button id="knova1">knova1</button><button id="merge3">merge3</button><button id="power_lotto">power_lotto</button><button id="spur">spur</button><button id="spur_w_form">spur_w_form</button><button id="stl_binary_ascii">stl_binary_ascii</button><button id="stl_writer">stl_writer</button><button id="tetris">Tetris</button><button id="turtle1">turtle1</button><button id="turtle2">turtle2</button><button id="turtle3">turtle3</button><button id="turtle4">turtle4</button><button id="turtle5">turtle5</button><button id="turtle6">turtle6</button><button id="turtle7">turtle7</button><button id="turtle8">turtle8</button><button id="twl_link_ik">twl_link_ik</button><button id="webcam">webcam</button><button id="websocket">websocket</button><button id="ycqsort">ycqsort</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<p><!-- 這裡的畫布 id 為 brython_div --></p>
<div id="brython_div"></div>
<!-- graphics-column is for ggame -->
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ######################  editor1 結束 ###################### --></p>
<p><!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 以上為內建程式, 頁面可透過 ?src=gist_url 執行 --></p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
################################## rocflag start
rocflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/roc_flag.py"
rocflag = button2(rocflag_url)
doc["rocflag"].bind("click", rocflag.do)
################################## rocflag end
################################## procflag start
procflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/proc_flag.py"
procflag = button2(procflag_url)
doc["procflag"].bind("click", procflag.do)
################################## rocflag end
################################## drawgrid start
drawgrid_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/070f424f2e9a99617009af216762163f66628e6d/draw_grid.py"
drawgrid = button2(drawgrid_url)
doc["drawgrid"].bind("click", drawgrid.do)
################################## drawgrid end
################################## grid_rect start
grid_rect_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/f3683ed24646f63625b616e9cb8e61a9a08ae9be/draw_grid_random_rect.py"
grid_rect = button2(grid_rect_url)
doc["grid_rect"].bind("click", grid_rect.do)
################################## grid_rect end
################################## rect_walk start
rect_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/fdf9749488a59f00c2398aede8b6cbe8c0ed5d81/rect_walk.py"
rect_walk = button2(rect_walk_url)
doc["rect_walk"].bind("click", rect_walk.do)
################################## rect_walk end
################################## rect_walk start
rect_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/63645d3f5823fd22bdb02e840e46e551afee4087/rect_u_walk.py"
rect_u_walk = button2(rect_u_walk_url)
doc["rect_u_walk"].bind("click", rect_u_walk.do)
################################## rect_walk end
################################## rect_rev_u_walk start
rect_rev_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/165e7792091d4b91b9923592242bfaf28258a719/rect_rev_u_walk.py"
rect_rev_u_walk = button2(rect_rev_u_walk_url)
doc["rect_rev_u_walk"].bind("click", rect_rev_u_walk.do)
################################## rect_rev_u_walk end
################################## single green chasing red start
sgcr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/9f7c1cda3a51b061cde00d104054fb3ce19ffd1a/single_green_chasing_red.py"
sgcr = button2(sgcr_url)
doc["sgcr"].bind("click", sgcr.do)
################################## single green chasing red end
################################## chasing 5 red rect start
# execute only one time
#cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/c43844d62a0bd7eb6617d5222ba93b5de033a63f/chasing_5_red_rect.py"
# continuously execution
cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py"
cfrr = button2(cfrr_url)
doc["cfrr"].bind("click", cfrr.do)
################################## chasing 5 red rect end
################################## usaflag start
usaflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/144b62fa07987d5ab6f369ae3661c645405e1872/usaflag.py"
usaflag = button2(usaflag_url)
doc["usaflag"].bind("click", usaflag.do)
################################## usaflag end
################################## snake start
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/f29309745a98687ed5c41cf90d28ef25a1e48dd4/snake_brython_div.py"
snake = button2(snake_url)
doc["snake"].bind("click", snake.do)
################################## snake end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecourse/2a8f213b6858a40481d17556c8a2fe86/raw/0a4a824493865dc7cf56977d03c9438d002b4268/kmlo_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## auto_guess start
auto_guess_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/auto_guess.py"
auto_guess = button2(auto_guess_url)
doc["auto_guess"].bind("click", auto_guess.do)
################################## auto_guess end
################################## ball start
ball_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ball.py"
ball = button2(ball_url)
doc["ball"].bind("click", ball.do)
################################## ball end
################################## bezier start
bezier_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/79794cbd97d0846e2c9df14d54118d5e00a97a22/bezier.py"
bezier = button2(bezier_url)
doc["bezier"].bind("click", bezier.do)
################################## bezier end
################################## big_lotto start
big_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/big_lotto.py"
big_lotto = button2(big_lotto_url)
doc["big_lotto"].bind("click", big_lotto.do)
################################## big_lotto end
################################## brython_kw start
brython_kw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/brython_kw.py"
brython_kw = button2(brython_kw_url)
doc["brython_kw"].bind("click", brython_kw.do)
################################## brython_kw end
################################## bunny start
bunny_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/bunny.py"
bunny = button2(bunny_url)
doc["bunny"].bind("click", bunny.do)
################################## bunny end
################################## cango_spur start
cango_spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur.py"
cango_spur = button2(cango_spur_url)
doc["cango_spur"].bind("click", cango_spur.do)
################################## cango_spur end
################################## cango_spur1 start
cango_spur1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur1.py"
cango_spur1 = button2(cango_spur1_url)
doc["cango_spur1"].bind("click", cango_spur1.do)
################################## cango_spur1 end
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## clear start
clear_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clear.py"
clear = button2(clear_url)
doc["clear"].bind("click", clear.do)
################################## clear end
################################## clock start
clock_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clock.py"
clock = button2(clock_url)
doc["clock"].bind("click", clock.do)
################################## clock end
################################## convert_temp start
convert_temp_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/convert_temp.py"
convert_temp = button2(convert_temp_url)
doc["convert_temp"].bind("click", convert_temp.do)
################################## convert_temp end
################################## display_stl start
display_stl_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/display_stl.py"
display_stl = button2(display_stl_url)
doc["display_stl"].bind("click", display_stl.do)
################################## display_stl end
################################## draw start
draw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/draw.py"
draw = button2(draw_url)
doc["draw"].bind("click", draw.do)
################################## draw end
################################## ex1 start
ex1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex1.py"
ex1 = button2(ex1_url)
doc["ex1"].bind("click", ex1.do)
################################## ex1 end
################################## ex2 start
ex2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex2.py"
ex2 = button2(ex2_url)
doc["ex2"].bind("click", ex2.do)
################################## ex2 end
################################## ex3 start
ex3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex3.py"
ex3 = button2(ex3_url)
doc["ex3"].bind("click", ex3.do)
################################## ex3 end
################################## ex4 start
ex4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex4.py"
ex4 = button2(ex4_url)
doc["ex4"].bind("click", ex4.do)
################################## ex4 end
################################## fourbar start
fourbar_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fourbar.py"
fourbar = button2(fourbar_url)
doc["fourbar"].bind("click", fourbar.do)
################################## fourbar end
################################## guess_a_number start
guess_a_number_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/guess_a_number.py"
guess_a_number = button2(guess_a_number_url)
doc["guess_a_number"].bind("click", guess_a_number.do)
################################## guess_a_number end
################################## hw1_1 start
hw1_1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-1.py"
hw1_1 = button2(hw1_1_url)
doc["hw1_1"].bind("click", hw1_1.do)
################################## hw1_1 end
################################## hw1_2 start
hw1_2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-2.py"
hw1_2 = button2(hw1_2_url)
doc["hw1_2"].bind("click", hw1_2.do)
################################## hw1-2 end
################################## knova1 start
knova1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/konva1.py"
knova1 = button2(knova1_url)
doc["knova1"].bind("click", knova1.do)
################################## knova1 end
################################## power_lotto start
power_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/power_lotto.py"
power_lotto = button2(power_lotto_url)
doc["power_lotto"].bind("click", power_lotto.do)
################################## power_lotto end
################################## spur start
spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur.py"
spur = button2(spur_url)
doc["spur"].bind("click", spur.do)
################################## spur end
################################## spur_w_form start
spur_w_form_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur_w_form.py"
spur_w_form = button2(spur_w_form_url)
doc["spur_w_form"].bind("click", spur_w_form.do)
################################## spur_w_form end
################################## stl_binary_ascii start
stl_binary_ascii_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_binary_ascii.py"
stl_binary_ascii = button2(stl_binary_ascii_url)
doc["stl_binary_ascii"].bind("click", stl_binary_ascii.do)
################################## stl_binary_ascii end
################################## stl_writer start
stl_writer_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_writer.py"
stl_writer = button2(stl_writer_url)
doc["stl_writer"].bind("click", stl_writer.do)
################################## stl_writer end
################################## turtle1 start
turtle1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle1.py"
turtle1 = button2(turtle1_url)
doc["turtle1"].bind("click", turtle1.do)
################################## turtle1 end
################################## turtle2 start
turtle2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle2.py"
turtle2 = button2(turtle2_url)
doc["turtle2"].bind("click", turtle2.do)
################################## turtle2 end
################################## turtle3 start
turtle3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle3.py"
turtle3 = button2(turtle3_url)
doc["turtle3"].bind("click", turtle3.do)
################################## turtle3 end
################################## turtle4 start
turtle4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle4.py"
turtle4 = button2(turtle4_url)
doc["turtle4"].bind("click", turtle4.do)
################################## turtle4 end
################################## turtle5 start
turtle5_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle5.py"
turtle5 = button2(turtle5_url)
doc["turtle5"].bind("click", turtle5.do)
################################## turtle5 end
################################## turtle6 start
turtle6_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle6.py"
turtle6 = button2(turtle6_url)
doc["turtle6"].bind("click", turtle6.do)
################################## turtle6 end
################################## turtle7 start
turtle7_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle7.py"
turtle7 = button2(turtle7_url)
doc["turtle7"].bind("click", turtle7.do)
################################## turtle7 end
################################## turtle8 start
turtle8_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle8.py"
turtle8 = button2(turtle8_url)
doc["turtle8"].bind("click", turtle8.do)
################################## turtle8 end
################################## twl_link_ik start
twl_link_ik_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/twl_link_ik.py"
twl_link_ik = button2(twl_link_ik_url)
doc["twl_link_ik"].bind("click", twl_link_ik.do)
################################## twl_link_ik end
################################## webcam start
webcam_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/webcam.py"
webcam = button2(webcam_url)
doc["webcam"].bind("click", webcam.do)
################################## webcam end
################################## ycqsort start
ycqsort_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ycqsort.py"
ycqsort = button2(ycqsort_url)
doc["ycqsort"].bind("click", ycqsort.do)
################################## ycqsort end
################################## fibo start
fibo_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fibo_ex.py"
fibo = button2(fibo_url)
doc["fibo"].bind("click", fibo.do)
################################## fibo end
################################## deepmerge start
deepmerge_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e89e0f978a015bf9361270a389a5b84e6244ed5b/deepmerge.py"
deepmerge = button2(deepmerge_url)
doc["deepmerge"].bind("click", deepmerge.do)
################################## deepmerge end
################################## merge3 start
merge3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/8a7452a451e57e4de720f22fc2fc8abd6aac0bc8/merge3.py"
merge3 = button2(merge3_url)
doc["merge3"].bind("click", merge3.do)
################################## merge3 end
################################## websocket start
websocket_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/86dda666271974d6c520086700db14a2124f0ae8/websocket.py"
websocket = button2(websocket_url)
doc["websocket"].bind("click", websocket.do)
################################## websocket end
################################## keycode start
keycode_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/ba159101705aaf8ba182a442b455425a48a85610/keycode.py"
keycode = button2(keycode_url)
doc["keycode"].bind("click", keycode.do)
################################## keycode end
################################## tetris start
tetris_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/738223b424c3f5f12961070aa8a75185177420b6/pygame_to_brython_tetris.py"
tetris = button2(tetris_url)
doc["tetris"].bind("click", tetris.do)
################################## tetris end
################################## grp_2022 start
# for 2b
grp_2022_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/2ffeba334d9862a9b4d765f328bc95684879465e/grp_2022.py"
grp_2022 = button2(grp_2022_url)
doc["grp_2022"].bind("click", grp_2022.do)
################################## grp_2022 end
################################## grp2a_2022 start
# for 2a
grp2a_2022_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/2ffeba334d9862a9b4d765f328bc95684879465e/grp2a_2022.py"
grp2a_2022 = button2(grp2a_2022_url)
doc["grp2a_2022"].bind("click", grp2a_2022.do)
################################## grp2a_2022 end
</script>
</p>