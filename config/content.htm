<h1>About</h1>
<p>倉儲: <a href="https://github.com/mdecycu/cd2022_guide">https://github.com/mdecycu/cd2022_guide</a></p>
<p>網站: <a href="https://mde.tw/cd2022_guide">https://mde.tw/cd2022_guide</a></p>
<h4>課程倉儲與網站:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cd2022">https://github.com/mdecycu/cd2022</a></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cd2022">https://mde.tw/cd2022</a></p>
<h4>網路設定:</h4>
<p style="padding-left: 30px;">由於目前電腦輔助設計室中的電腦只要將網路連接到系上的主幹 (因為課程要全面在純 IPv6 網段上運作), 直接連外, 電腦中就會有蠕蟲程式啟動攻擊(Why?, 如何找到攻擊源頭?), 造成操作系統所安裝的防毒軟體為了防堵惡意攻擊而關閉網路連線.</p>
<p style="padding-left: 30px;">為因應上述問題, 可以在切換至連外網段後, 將系統的代理主機自動偵測關閉, 且自行設定能夠支援 IPv6 與 IPv4 的代理主機, 並且關閉網路卡的 IPv4 網路協定, 就可以避開惡意軟體的攻擊.</p>
<p style="padding-left: 30px;">若要在開機後, 防毒軟體啟動前, 以批次檔案的執行, 自動完成上述三項設定, 可以參考:</p>
<p style="padding-left: 60px;">電腦輔助設計室 <a href="https://github.com/mdecourse/wcm2022/discussions/2">IPv6 網路設定</a></p>
<h4>分組:</h4>
<p style="padding-left: 30px;">利用 Ethercalc 收集各班學員的 Github 帳號與組別, 存入 <a href="https://github.com/mdecycu/studlist/tree/main/2022spring">https://github.com/mdecycu/studlist/tree/main/2022spring</a></p>
<p style="padding-left: 30px;">各學員若 github 帳號有更動, 可以自行至 <a href="https://github.com/mdecycu/studlist">https://github.com/mdecycu/studlist</a>  倉儲, 以 pull requests 進行修改.</p>
<p style="padding-left: 30px;">以 2b 為例, 每一大組 8 人, 且分為兩個 4 人小組, 目前可以透過 <a href="http://mde.tw/studlist/2022spring/2b.txt">http://mde.tw/studlist/2022spring/2b.txt</a> 讀取. 且透過 <a href="/downloads/read_data_from_nfulist.py">read_data_from_nfulist.py</a> 可以在近端讀取各班學員的 github 帳號與組別.</p>
<p style="padding-left: 30px;">目前碰到的問題是:</p>
<p style="padding-left: 60px;">能不能透過隨機方式自動幫尚未納組的學員分組?</p>
<p style="padding-left: 60px;">能不能直接在網站上顯示出各學員的 cd2022 課程倉儲與網站?</p>
<p style="padding-left: 90px;">參考: <a href="https://mde.tw/cd2022_guide/content/run.html?src=https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/47ba006b45b227bc1135542f91adcc025f3f2590/grp_2022.py">grp_2022</a>, <a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/0999a227153ea9a20954e4b2b77f783337197627/w4_grp_src.py&amp;src2=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/0999a227153ea9a20954e4b2b77f783337197627/w4_grp_src2.py">2a 分組程式練習</a>, <a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/507db6ddb7b5bcdd3027235761208b32ac93bcd0/w4_b_grp.py&amp;src2=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/507db6ddb7b5bcdd3027235761208b32ac93bcd0/w4_b_grp_src2.py">2b 分組程式練習</a></p>
<h4>下載課程工具:</h4>
<p style="padding-left: 30px;">協同產品設計實習課程將會用到 NX1980, 若在電腦輔助設計室, 可以直接從 <a href="http://wcm.cycu.org:88/">http://wcm.cycu.org:88/</a> 下載.</p>
<p style="padding-left: 30px;">NX12 版 (2017.10) 之後的版號:</p>
<p style="padding-left: 60px;">2019.01: NX1847 開始啟動 Continuous Release</p>
<p style="padding-left: 60px;">2019.06: NX1872 啟動每半年釋出一個累加 27 的 Series 版次號.</p>
<p style="padding-left: 60px;">2019.12: NX1899 = NX1872 + 27</p>
<p style="padding-left: 60px;">2020.06: NX1926 = NX1899 + 27</p>
<p style="padding-left: 60px;">2020.12: NX1953 = NX1926 + 27</p>
<p style="padding-left: 60px;">2021.06: NX1980 = NX1953 + 27</p>
<p style="padding-left: 60px;">2021.12: NX2007 = NX1980 + 27</p>
<p style="padding-left: 60px;">2022.06: NX2034 = NX2007 + 27</p>
<h4>讀取各學員每週工作內容:</h4>
<p style="padding-left: 30px;">當完成分組後, 且各學員已經透過各自 Github 帳號下的 cd2022 倉儲開始執行課程任務後, 能否透過程式逐日或逐週讀取各學員的工作內容?</p>
<h4>課程第一階段要求:</h4>
<p style="padding-left: 30px;">每一個大組都要設法提供 solvespace, NX1980 格式的 <a href="https://cad.onshape.com/documents/3c81d3f7fc38f5da16eef9ed/w/f6d4616f188bc9425608890c/e/08936ec436f9e9668efeaefd?renderMode=0&amp;uiState=6254c8ae6d93450dec4bb2b2">uarm</a> (Onshape 格式) 機械手臂零組件.</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2022_uarm_nx12_imported.7z">cd2022_uarm_nx12_imported.7z</a></p>
<div id="disqus_thread"></div>
<p>
<script>
/**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://https-mde-tw-eng.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
</script>
</p>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><h2>IPv6</h2>
<p>電腦輔助設計室 <a href="https://github.com/mdecourse/wcm2022/discussions/2">IPv6 網路設定</a></p>
<p>手機、筆電或平板可以透過 810WIFI 無線網路接點連線, 取得系網 IPv6 連外網址與 IPv4 NAT 內部網址.</p>
<p><a href="https://www.tipo.gov.tw/tw/cp-180-219597-bf26c-1.html">智慧財產局學校行政與電算中心篇</a></p>
<p><a href="https://www.netadmin.com.tw/netadmin/zh-tw/snapshot/484F7B4D900C4BDF988F0D6AAE2A8706">如何避免惡意軟體的侵害</a>?</p>
<h4>問題:</h4>
<p style="padding-left: 30px;">為何不使用 NAT 機制, 而讓電腦輔助設計室中的電腦直接連上外部網路?</p>
<p style="padding-left: 60px;">因為與 IPv4 協定比較, IPv6 協定安全性較高, 且直接連外可取得較大頻寬, 無需採 port mapping 就可啟動 IPv6 協定伺服器.</p>
<p style="padding-left: 30px;">使用 IPv6 連網有哪些好處? 有沒有壞處?</p>
<p style="padding-left: 60px;">好處如上, 而壞處是若要連線到只支援 IPv4 協定的網站, 需要透過雙協定支援的 Proxy, 其中包括 http(s) 與 git.</p>
<p style="padding-left: 30px;">如何使用批次檔案完成 IPv6 網路設定, 避開惡意軟體的網路攻擊?</p>
<p style="padding-left: 60px;">請參考 <a href="https://github.com/mdecourse/wcm2022/discussions/2">IPv6 網路設定</a> 說明.</p>
<h3>template and SSH</h3>
<p>以下教學影片說明如何利用 <a href="https://github.com/wcm2022/wcm2022">https://github.com/wcm2022/wcm2022</a> 倉儲作為 template, 建立個人與分組的倉儲. 並且利用 putty 與 GIT_SSH 變數的設定, 採用 SSH 網路協定對 Github 上的倉儲進行改版:</p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/w5_template/w5_template.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div><h2>Grouping</h2>
<p><a href="https://mde.tw/cd2022">cd2022</a> 課程由學員自行分組, 每四人為一小組, 每兩小組組成一大組.</p>
<p>所有課程指定內容可由各小組組員討論 (每週至少開會一次, 且將小組討論過程與結論放入各小組分組倉儲) 後, 在個人所負責的項目執行完成後, 先納入個人 cd2022 倉儲後, 再依照組序整合至該小組組長的協同倉儲 (例如: 甲班第一大組的第一小組倉儲名稱將為: cd2022ag1-1, 甲班第一大組的第二小組倉儲名稱將為: cd2022ag1-2).</p>
<p>各大組成員每兩週在上課之前必須至少開會一次, 且將大組討論過程與結論放入各大組分組倉儲後 (例如: 甲班第一大組的倉儲名稱將為: cd2022ag1), 比較並統整各小組所完成的內容後, 將協同設計結果納入各大組的分組倉儲, 且各大組每兩週將利用課程時間進行網際協同分組簡報.</p>
<h4 style="padding-left: 30px;">問題:</h4>
<p style="padding-left: 60px;">為什麼需要定期進行分組簡報?</p>
<p style="padding-left: 60px;"><a href="/downloads/The Importance of Presentation Skills in Institutions of Higher Learning.pdf">The Importance of Presentation Skills in Institutions of Higher Learning.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/The 7 Main Reasons Why People Give Presentations.pdf">The 7 Main Reasons Why People Give Presentations.pdf</a></p>
<p>以下 Brython 程式可讀取各大組的學員分組資料後, 直接在網頁中列出各學員 cd2022 倉儲與網頁連結、各小組協同倉儲與網頁連結、以及各大組協同倉儲與網頁連結.</p>
<p>請注意: 各組學員 github 帳號下除建有個人 cd2022 倉儲外, 還必須 fork 大組倉儲 (例如: 甲班第一大組的倉儲名稱將為: cd2022ag1) 並在各大組進行網際協同分組簡報前, 與所屬大組的分組協同倉儲內容保持同步.</p>
<p><a href="https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/c7043ac81005b069c58080c1222fe30048d588cb/grp_2022.py">grp_2022.py</a> (<a href="https://mde.tw/cd2022_guide/content/run.html?src=https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/c7043ac81005b069c58080c1222fe30048d588cb/grp_2022.py">run</a>)</p>
<p><a href="/downloads/w4_2a_get_grp1_num_of_members.txt">w4_2a_get_grp1_num_of_members.txt</a></p>
<p><a href="https://mde.tw/cd2022_guide/content/run.html?src=https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/f8c034b69ea88c2fc3c716ca49a9cf8aec1e6b25/w4_2a_grp">w4 2a 分組結果</a></p>
<h3>Pull requests</h3>
<p><a href="https://mde.tw/cd2022">cd2022</a> (cd 為 collaborative design 縮寫) 協同產品設計實習課程的修課學員名單、Github 帳號與大組分組組別資料, 以 Tab (即 \t) 隔開 (<a href="https://github.com/mdecycu/studlist/blob/main/2022spring/2a.txt">2a.txt</a> 與 <a href="https://github.com/mdecycu/studlist/blob/main/2022spring/2b.txt">2b.txt</a>), 採用倉儲儲存, 再透過 Github Pages, 能讓任何成員從全球資訊網介面:</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/studlist/2022spring/2a.txt">http://mde.tw/studlist/2022spring/2a.txt</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/studlist/2022spring/2b.txt">http://mde.tw/studlist/2022spring/2b.txt</a></p>
<p>讀取資料內容.</p>
<p>採用 Github 存放各班學員相關資料的好處, 是可以讓學員自行透過 Pull Requests 的方式協同管理資料內容, 除能讓資料始終保持正確外版本. 當學員的 Github 帳號或組別有異動時, 能夠自行維護並留下改版紀錄.</p>
<p>協同產品設計流程中最重要的概念是: 如何運用各種永續的方法, 讓產品設計的各階段工具與終端產品, 皆能採有效率的方式因應可能遭遇的變化.</p>
<hr/>
<p>利用 wcm2022 帳號修改 <a href="https://github.com/mdecycu/studlist">https://github.com/mdecycu/studlist</a> 中的組別資料, 作為 pull request 範例.</p>
<p>動態網頁嵌入 Wink 影片的參考 html: <a href="/downloads/2a_w3_studlist_pull_requests_wink_html.txt">2a_w3_studlist_pull_requests_wink_html.txt</a></p>
<p>以下影片說明如何利用 Pull Requests 對沒有協同管理權限的 github 倉儲進行改版後, 要求合併內容:</p>
<p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/2a_w3_studlist_pull_requests.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<p>以下影片說明如何透過逆向 Pull Requests 讓各學員帳號下的分組倉儲與組長帳號下的協同倉儲內容保持同步:</p>
<script>
var winkVideoData2 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
    "1682": [
      { type: "gotourl", rect: { x: 321, y: 166, width: 60, height: 24 }, target: "https://support.mozilla.org/en-US/questions/1230877", window: "reset certificate" },
    ],
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData2" height="630" muted="true" width="1008">
<source src="/downloads/w5_pull_request/w5_pull_request.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div><h2>Revealjs</h2>
<p><a href="https://revealjs.com/">https://revealjs.com/</a> 是一個 Javascript 程式框架, 可用來建立全球資訊網上的簡報.</p>
<p>將 reveal.js 納入分組倉儲的真正目的, 是能直接在統一的 GitHub 提交推送過程中, 持續查核各組員對於協同產品開發流程的貢獻度.</p>
<p>至於為何要利用 markdown 格式, 在 Leo Editor 中轉為 index.html 進行展示, 是希望在組員改版間避開以 html 格式處理衝突的難度.</p>
<p>課程中所採的各種方法並非限制, 而是在衡量協同利弊得失後的可行方法之一.你們可以就各種工具在協同產品設計流程中的應用. 進行討論及實作, 然後查驗所採行的方法是否也能:</p>
<ol>
<li>持續改進</li>
<li>保有各組員的改版紀錄</li>
<li>方便處理合併及展示</li>
<li>具永續性及可應變性</li>
</ol>
<p><a href="https://github.com/hakimel/reveal.js">https://github.com/hakimel/reveal.js</a> 引用了許多 Javascript 程式庫, 這些程式庫的改版非常頻繁, 經常造成改版頻率相對緩慢的 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 經常收到來自 Github 的改版通知.</p>
<p>因此在利用 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 建立 cd2022 課程網站與大分組網站時, 若要直接使用 Reveal.js 建立線上簡報, 就必須將 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 的 reveal 目錄內容保持在最新的 Reveal.js 版本.</p>
<p><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a> 就是用於開發 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 的倉儲. cmsimde_site 的 main 分支直接將 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 內容放入 cmsimde 目錄, 可以直接根據需求修改其中的任何內容, 當測試無誤後(尚未使用 <a href="https://docs.python.org/3/library/unittest.html">unittest</a>), 將改版內容反應至 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 後, 將在 cmsimde_site 倉儲中的 submodule 分支中進行測試.</p>
<p>由於 cmsimde_site 的 main 分支直接將 cmsimde 當作子目錄, 而 submodule 分支則將 cmsimde 當作子模組. 從 main 分支切換到 submodule, 由於需要同時取下 cmsimde 子模組資料, 因此使用:</p>
<p style="padding-left: 30px;">git checkout -f submodule --recurse-submodules</p>
<p>而從 submodule 分支切換回 main 分支, 則使用:</p>
<p style="padding-left: 30px;">git checkout -f main</p>
<p><a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 倉儲中的 config/reveal.leo 使用 <a href="https://leoeditor.com/">Leo Editor</a> 編輯各簡報頁面內容. reveal.leo 中包含 demo.html 中的各種簡報應用, 使用者可以從 Leo Editor 專案中取出所需的簡報頁面進行編輯.</p>
<p>以下影片說明如何利用 Leo Editor 編輯 config/reveal.leo 網際簡報檔案:</p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/w5_reveal/w5_reveal.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<p>以下影片說明如何利用 Leo Editor 編輯 config/pelican.leo 網誌檔案:</p>
<script>
var winkVideoData2 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData2" height="630" muted="true" width="1008">
<source src="/downloads/w6_blog/w6_blog.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div><h2>Meeting</h2>
<p><a href="https://www.atlassian.com/blog/teamwork/how-to-run-effective-meetings">https://www.atlassian.com/blog/teamwork/how-to-run-effective-meetings</a></p>
<p style="padding-left: 30px;">Most of us don’t have formal training in meeting management skills, but anyone can learn to do it well – whether your team is in the office, fully virtual, or hybrid.</p>
<p style="padding-left: 30px;">An efficient meeting starts promptly, stays on track due to good time management, includes as few people as possible, and achieves the stated objective.</p>
<p style="padding-left: 30px;">An effective meeting brings a thoughtfully selected group of people together for a specific purpose, provides a forum for open discussion, and delivers a tangible result: a decision, a plan, a list of great ideas to pursue, a shared understanding of the work ahead. Not only that, but the result is then shared with others whose work may be affected.</p>
<p style="padding-left: 30px;">Successful meetings have a clear purpose.</p>
<p style="padding-left: 30px;">Meetings should never be held for the sole purpose of sharing information – that’s what email, chat, and company intranets (e.g., Confluence) are for. Department and company all-hands meetings are a notable exception. They provide a unique chance for people at all levels of the business to hear directly from executives and other decision-makers – and, if you include time for Q&amp;A, vice-versa.</p>
<p style="padding-left: 30px;">In the best-case scenario, a meeting’s purpose is to make a decision or create something collaboratively. Project planning, mapping out customer journeys, setting goals, solving a problem, choosing X vs. Y … all these are situations where holding a meeting is probably the most effective way to get it done.</p>
<p style="padding-left: 30px;">Effective meetings keep attendees engaged.</p>
<p style="padding-left: 30px;">Effective meetings provide a safe space for divergent thinking.</p>
<p style="padding-left: 30px;">Effective meetings produce real, shareable results.</p>
<p><a href="https://www.nytimes.com/guides/business/how-to-run-an-effective-meeting">https://www.nytimes.com/guides/business/how-to-run-an-effective-meeting</a></p>
<p style="padding-left: 30px;">Set the Agenda</p>
<p style="padding-left: 30px;">Start on Time. End on Time.</p>
<p style="padding-left: 30px;">End with an Action Plan</p>
<p><a href="https://hbr.org/1976/03/how-to-run-a-meeting">https://hbr.org/1976/03/how-to-run-a-meeting</a></p>
<p><a href="https://slack.com/blog/productivity/run-effective-meetings">https://slack.com/blog/productivity/run-effective-meetings</a></p>
<p><a href="https://www.scoro.com/blog/tips-for-effective-meeting-management/">https://www.scoro.com/blog/tips-for-effective-meeting-management/</a></p>
<p>結論是: 在協同產品設計流程, 該如何開會?</p>
<h2>TEX and LaTeX</h2>
<p>為什麼協同產品設計實習需要採用 TEX 與 LaTeX 輸出技術文件?</p>
<p><a href="https://github.com/mdecycu/4072pj1/blob/master/.github/workflows/main.yml">https://github.com/mdecycu/4072pj1/blob/master/.github/workflows/main.yml</a></p>
<p><a href="https://dev.to/mrturkmen/latex-with-github-actions-4580">https://dev.to/mrturkmen/latex-with-github-actions-4580</a> </p>
<p><a href="https://www.reed.edu/cis/help/LaTeX/intro.html">https://www.reed.edu/cis/help/LaTeX/intro.html</a> </p>
<p><a href="https://ftp.ntou.edu.tw/ctan/info/gentle/gentle.pdf">https://ftp.ntou.edu.tw/ctan/info/gentle/gentle.pdf</a></p>
<p><a href="http://tug.ctan.org/info/impatient/book.pdf">http://tug.ctan.org/info/impatient/book.pdf</a></p>
<p><a href="https://texdoc.org/serve/TeXbyTopic.pdf/0">https://texdoc.org/serve/TeXbyTopic.pdf/0</a></p>
<p></p><h1>Assignments</h1>
<p>協同產品設計實習課程學員評分要點:</p>
<p>sustainable (可持續使用, 永續):</p>
<p style="padding-left: 30px;">1 : capable of being sustained (可持續)</p>
<p style="padding-left: 30px;">2a : of, relating to, or being a method of harvesting (獲取成果) or using a resource (運用資源) so that the resource (該資源) is not depleted (不致枯竭) or permanently damaged (永久損壞).</p>
<p style="padding-left: 30px;">2b : of or relating to a lifestyle involving the use of sustainable methods (採取永續的生活方式)</p>
<p style="padding-left: 30px;">在 cd2022 課程 sustainable 代表所採行的解題方式, <span style="background-color: #ffff99;">為所有分組組員認可是當下環境中, 最佳處理方式與流程, 可作為其他分組學習並能在課程各階段任務中延續使用</span>.</p>
<p>resilience (應變能力, 韌性):</p>
<p style="padding-left: 30px;">1 : the capability of a strained body (承受應變物體) to recover its size and shape after deformation caused especially by compressive stress (尤指受到壓縮應力)</p>
<p style="padding-left: 30px;">2 : an ability to recover (回復能力) from or adjust easily (易於調適) to misfortune or change (面臨意外情境或變化)</p>
<p style="padding-left: 30px;">在 cd2022 課程 resilience 代表<span style="background-color: #ffff99;">各分組成員需具備一定的應變處理能力</span>.</p>
<p>20220302 工作流程:</p>
<ol>
<li>將 cadlab 網路連線接到系 backbone (使用純 IPv6 設定後, 為了連結到 IPv4 網站, 必須透過雙協定支援的 proxy server)</li>
<li>將兩個隨身碟放入電腦 USB 3.0 插槽 (與 2.0 速度差 10 倍)</li>
<li>啟動電腦</li>
<li>在 Windows 10 尚未啟動防毒軟體之前, 以系統管理員身分執行 1_ipv6_network_setup.bat (為了避開蠕蟲惡意的網路攻擊)</li>
<li>批次檔案將會開啟 Firefox 連結到 cd2022 課程網頁與倉儲</li>
<li>希望修改 cmsimde 倉儲內容, 以 git clone --recurse-submodules git@github.com:mdecycu/cmsimde.git 取下倉儲資料時, 電腦回報沒有 correct access rights</li>
<li>上個步驟表示 putty session github.com 並沒有設定, 可帶出上週在 cdb 從 registry 匯出的 2022_cdb.reg, 直接以滑鼠點擊執行後, 再次執行 git clone --recurse-submodules git@github.com:mdecycu/cmsimde.git 取下 cmsimde 倉儲</li>
<li>但 cmsimde 無法直接產生靜態網頁與動態網頁, 因此以 cmsimde_site 倉儲納入 cmsimde 程式碼, 進行修改後, 將資料回應至 cmsimde</li>
<li>需要新增 github 倉儲, 因此必須登入 github.com 建立 cmsimde_site 倉儲 (能不能直接在近端使用 ssh 與程式建立 github 倉儲?)</li>
<li>因為要取 2a 學員 github 帳號, 以 ssh 登入 .17 電腦, 啟動 ethercalc</li>
<li>由於必須從教務主機取得 2a 學員學號, 經由 heroku 雲端主機取得 <a href="https://nfulist.herokuapp.com/?semester=1102&amp;courseno=0752&amp;column=True">https://nfulist.herokuapp.com/?semester=1102&amp;courseno=0752&amp;column=True</a></li>
<li>連接至 cd2022 gitter, 告知擷取 2a github 帳號的 ethercalc 表單連結</li>
<li>cd2022 要求每一學員必須在 github 帳號下建立 cd2022 倉儲與網頁, 並且由各小組組長建立 cd2022ag1-1 (為第一組第一小組), 且每位學員在 cd2022ag1-1 都擁有 git push 權限, 或採 pull requests 方式修改小組分組倉儲內容</li>
<li>而每一大組的組長負責建立 cd2022ag1 (為 2a 第一大組為例) 後, 各大組學員對分組倉儲可以擁有 git push 權限, 或各學員採 pull requests 方式修改大分組倉儲內容</li>
<li>各學員在每週會議後, 個人所負責完成的內容或簡報必須先放到個人的 cd2022 倉儲後, 再透過小組協同倉儲練習如何解決組員間提交內容的衝突後, 再整合至各大組的協同倉儲.</li>
<li>接著要從 ethercalc 取下 2a 學員的 github 帳號與大組分組資料, 並存入 studlist 倉儲 (能不能用程式協助?)</li>
</ol>
<p id="2aw2">2a w2 assignments:</p>
<p>1. 在個人帳號下, 使用<a href="https://github.com/mdecourse/cmsimde/tree/9efabe7ab2fc4952f9255cf30b3856695514b3ee">最新版的 cmsimde</a> 建立 cd2022:</p>
<p style="padding-left: 30px;">以子模組的方式建立倉儲:</p>
<p style="padding-left: 60px;">git submodule add https://github.com/mdecycu/cmsimde.git cmsimde</p>
<p style="padding-left: 30px;">或者直接將 cmsimde 倉儲作為 cmsimde 目錄:</p>
<p style="padding-left: 60px;">git clone --recurse-submodules https://github.com/mdecycu/cmsimde.git</p>
<p style="padding-left: 30px;">然後再將沒有 git 版本資料的 cmsimde 目錄放到個人倉儲.</p>
<p>2. 根據 <a href="https://mde.tw/cd2022_guide/content/Grouping.html">https://mde.tw/cd2022_guide/content/Grouping.html</a>  中的 2b 程式執行, 配合 <a href="https://mde.tw/studlist/2022spring/2a.txt">https://mde.tw/studlist/2022spring/2a.txt</a> 修改為能夠直接在頁面顯示各組員的 cd2022 倉儲與網頁連結, 以及各學員協同大分組倉儲與網頁連結 (例如: cd2022ag1).<br/><br/>3. 能否透過 github api 程式 (也可以逐一進入各班組員 github 帳號, 以手動查驗後, 以表格列出結果), 列出 w2 階段各組員帳號下 cd2022 與 cd2022ag1 (以 2a 第一組組員為例) 是否符合陽春的 cmsimde_site 內容. (例如: 透過 <a href="https://github.com/PyGithub/PyGithub">https://github.com/PyGithub/PyGithub</a>)</p>
<h4>2bw2:</h4>
<p>建立個人 cd2022 與 cd2022bg1 (以 2b 第一大組為例) 時, 可以用 import <a href="https://github.com/mdecourse/cmsimde_site">cmsimde_site</a> 倉儲 (但 history 將會是 mdecycu 而非學員), 或 git submodule add 或直接將 cmsimde 下載 <a href="https://github.com/mdecycu/cmsimde/archive/refs/heads/master.zip">https://github.com/mdecycu/cmsimde/archive/refs/heads/master.zip</a> 後解開為倉儲下的 cmsimde 目錄, 之後再將 up_dir 內容複製到倉儲根目錄. 當評分檢查時, 各大組需繳交全班各學員是否達成任務要求.</p>
<p>cd2022 w2 任務 1:</p>
<p style="padding-left: 30px;">請各組利用一個小時建立一個欄位以 tab 隔開的 txt 檔案, 欄位標題分別為學號, 個人倉儲, 大分組倉儲排列, 按照各班學員學號順序 (<a href="https://nfulist.herokuapp.com/?semester=1102&amp;courseno=0752&amp;column=True">2a 修課學員</a>, <a href="https://nfulist.herokuapp.com/?semester=1102&amp;courseno=0764&amp;column=True">2b 修課學員</a>). 完成後請各大組將結果回應至 <a href="https://github.com/mdecourse/cd2022/discussions/16">2b w2 討論區</a>.</p><h3>各週任務</h3>
<h4>w2 任務:</h4>
<h4 style="padding-left: 30px;">問題緣起:</h4>
<p style="padding-left: 60px;">第二週的任務<a href="https://mde.tw/cd2022_guide/content/Assignments.html#2aw2">啟動源頭</a>來自課程實際分組時所產生的問題.</p>
<p style="padding-left: 60px;">各班利用 Ethercalc 表單同步輸入 github 帳號與組別時, 將資料存入 <a href="https://github.com/mdecycu/studlist">https://github.com/mdecycu/studlist</a>  倉儲.</p>
<p style="padding-left: 60px;">經由 Github Pages 設定後, 可由 <a href="https://mde.tw/studlist/2022spring/2a.txt">https://mde.tw/studlist/2022spring/2a.txt</a> 讀取甲班的學員帳號及分組資料 (各欄位以 tab 隔開), 而從 <a href="https://mde.tw/studlist/2022spring/2b.txt">https://mde.tw/studlist/2022spring/2b.txt</a> 則可讀取乙班的學員帳號及分組資料.</p>
<h4 style="padding-left: 30px;">指定任務:</h4>
<p style="padding-left: 60px;">請學員以全球資訊網頁的 URL 讀取各班資料後, 是否能夠以永續便捷的方式取得已經選好組別的<span style="background-color: #ffff99;">學員學號</span>、學員<span style="background-color: #ffff99;">個人倉儲連結</span>、學員<span style="background-color: #ffff99;">個人網站</span>、各組位於學員帳號下的<span style="background-color: #ffff99;">大組倉儲</span>以及各學員帳號下各大組的<span style="background-color: #ffff99;">協同網站</span>.</p>
<p style="padding-left: 60px;">而針對尚未填入 github 帳號的學員, 以其學號作為其 github 帳號. 針對尚未列出分組序號的學員, 則委由隨機方式編入尚不足 8 名學員的組別, 若各組已經都補滿 8 名學員, 仍餘有尚未分組的學員時, 則採隨機方式從各班第一組依序補入各組後, 分別在個人及大分組的 w2 標題頁面中, 列出各大組與全班的上述要求資料.</p>
<p style="padding-left: 60px;">到了 w4 各班學員分組已經底定, 若採 Brython 方式(全球資訊網前端)將學員資料讀出後進行排序與整合, 可以如 <a href="https://mde.tw/cd2022_guide/content/Brython.html">https://mde.tw/cd2022_guide/content/Brython.html</a> 中, 直接在網頁上即時列出與 <a href="https://mde.tw/studlist/2022spring/2a.txt">https://mde.tw/studlist/2022spring/2a.txt</a> 及 <a href="https://mde.tw/studlist/2022spring/2b.txt">https://mde.tw/studlist/2022spring/2b.txt</a> 對應的學員倉儲與網頁連結, 以及各學員帳號下的大組同步倉儲與網頁連結.</p>
<p style="padding-left: 60px;">接下來若要採 CPython (全球資訊網後端或 <a href="https://en.wikipedia.org/wiki/Command-line_interface">CLI/GUI</a> 模式)在 Windows 環境中執行運算, 該如何進行?</p>
<h4>w3 任務:</h4>
<h4 style="padding-left: 30px;">問題緣起:</h4>
<p style="padding-left: 60px;">w2 完成分組後, 各組即進入利用 NX1980 繪製 uArm 機械手臂的協同設計階段, 其中包括手臂兩側的正齒輪減速機設計, 以及各連桿與組立所需要的其他組件設計等 (完成圖如 <a href="https://cad.onshape.com/documents/3c81d3f7fc38f5da16eef9ed/w/f6d4616f188bc9425608890c/e/08936ec436f9e9668efeaefd?renderMode=0&amp;uiState=6254c8ae6d93450dec4bb2b2">Onshape 中的 uArm 組立圖</a>).</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2022_uarm_nx12_imported.7z">cd2022_uarm_nx12_imported.7z</a></p>
<p style="padding-left: 60px;">uArm 機械手臂的初步設計目的, 是完成 NX1980 組立圖後, 能轉入 Coppeliasim 環境中進行機電系統組合模擬, 讓操作者透過 <a href="https://www.coppeliarobotics.com/helpFiles/en/customUIPlugin.htm">Custom UIs 介面</a>操控四個自由度的 uArm 步進伺服馬達.</p>
<h4 style="padding-left: 30px;">指定任務:</h4>
<p style="padding-left: 60px;"><a href="https://mde.tw/cd2022_guide/content/NX1980.html#learnnx">這裡</a>有 38 個比較接近 NX1980 版本功能的教學影片 (<a href="https://www.youtube.com/watch?v=GUaa97tALxE&amp;list=PLzEsJue49U_EMMv0eBo8MNJjJOq_WHCrl">連結</a>), 請以每一學員分配 5 個影片的原則, 由各學員在 w3 標題頁面中, 根據影片中的教學內容, 以 Wink 影片互相對照的方式採 NX1980 執行操作進行整理, 完成後請將所負責的 Wink 教學影片嵌入個人與大分組的 w3 標題頁面中.</p>
<p><span style="background-color: #ffff99;">w4 各班上課時段前</span>, 請各小組與大組成員分別開會討論後, 採協同設計流程執行上述任務, 並準備在 w4 上課時段中直接利用網頁簡報呈現各大組的執行流程與結果.</p><h2>w6 任務</h2>
<p><a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/a79d474df5500b7487a352903b81989f9a0cd24f/w6_blog.py">2a w6 blog 查驗</a></p>
<p style="padding-left: 30px;"><a href="/downloads/w6_blog/2a_stage1.txt">2a_stage1.txt</a></p>
<p style="padding-left: 30px;"><a href="/downloads/w6_blog/2a_stage2.txt">2a_stage2.txt</a></p>
<p style="padding-left: 30px;"><a href="/downloads/w6_blog/2a_stage3.txt">2a_stage3.txt</a></p>
<p><a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/c0e6d1f197434988c56451b2c25f7607c06a15d8/w6_blog_2b.py">2b w6 blog 查驗</a></p>
<p style="padding-left: 30px;"><a href="/downloads/w6_blog/2b_stage1.txt">2b_stage1.txt</a></p>
<p style="padding-left: 30px;"><a href="/downloads/w6_blog/2b_stage2.txt">2b_stage2.txt</a></p>
<p>以下影片說明如何利用 Leo Editor 編輯 config/pelican.leo 網誌檔案:</p>
<script>
var winkVideoData2 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData2" height="630" muted="true" width="1008">
<source src="/downloads/w6_blog/w6_blog.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div><h2>w7 任務</h2>
<p><a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/07fc8d08e6738f91f7f8042ff48385b4e10436bf/w7_a_summary.py">2a w7 summary 查驗</a> (<a href="/downloads/w7_project/w7_a_summary.txt">2a 有網誌者</a>)</p>
<p><a href="https://mde.tw/cd2022_guide/content/Brython?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/faffe2bd308016216ce19de21c38a6e33ea33a1f/w7_b_summary.py">2b w7 summary 查驗</a> (<a href="/downloads/w7_project/w7_b_summary.txt">2b 有網誌者</a>)</p>
<p>為了讓各組設計中的 uArm 機械手臂 (<a href="/downloads/cd2022_uarm_nx12_imported.7z">cd2022_uarm_nx12_imported.7z</a>) 能夠透過 Pick and Place 控制流程參與 <a href="https://mde.tw/cd2022_guide/content/Tic-Tat-Toe.html">Tic-Tat-Toe 遊戲</a>, 本週將進行下列實習任務:</p>
<p>請利用隨身程式系統編譯 <a href="https://github.com/mdecourse/scarysim">https://github.com/mdecourse/scarysim</a> 中的 SCARA robot 模擬系統. 完成此 Qt C++ 程式碼的編譯與操作後, 接著請完成 CoppeliaSim 範例中 <a href="https://github.com/CoppeliaRobotics/models/blob/master/robots/non-mobile/MTB%20robot.ttm">MTB robot</a> 所進行的 <a href="https://www.youtube.com/results?search_query=mtb+robot">Pick and Place demo</a>.</p>
<h4>設法以隨身程式系統編譯此程式碼:</h4>
<ol>
<li>git clone <a href="https://github.com/mdecourse/scarysim.git">https://github.com/mdecourse/scarysim.git</a></li>
<li>修改 scarysim.pro, 蓋掉第 11 行, 成為 # LIBS     += -lglut -lGLU</li>
<li>cd scarysim</li>
<li>qmake -o Makefile scarysim.pro</li>
<li>mingw32-make -f Makefile.Release 可以在 release 目錄取得 scarysim.exe</li>
<li>因為 scarysim.exe 執行需要 base.obj, arm1.obj, arm2.obj, arm3.obj 等零件外型檔案, 以及對應的 .mtl 材質檔案, 因此可將 scarysim.exe 移至倉儲根目錄, 並且需要 msys64_20210419\mingw64\bin 路徑中的 dll 動態連結程式庫配合執行.</li>
<li>由於此套程式碼在 Target 模式下, 零組件間會造成干涉, 表示其 Inverse Kinematic 運算並不正確, 請設法修正此錯誤後, 修改其零件尺寸與操作控制方法, 設法模擬 MTB 的 <a href="https://www.youtube.com/results?search_query=mtb+robot">Pick and Place demo</a> 範例.</li>
<li>請各組指定組員分別利用 Solvespace、NX12、NX1980、NX2008 與 Onshape 繪製 <a href="https://www.youtube.com/results?search_query=mtb+robot">Pick and Place demo</a> 範例所需的零組件, 並完成 Coppeliasim 4.1.0、4.2.0 與 4.3.0 版的 MTB 機械手臂 Pick and Place 模擬, 完成後請說明在使用不同 MCAD 系統與版次的情況下, 該如何執行協同產品設計專案.</li>
</ol>
<p><a href="https://www.investopedia.com/terms/d/deliverables.asp">Deliverables</a>:</p>
<ol>
<li>各組組員以 Pelican 網誌 (w7_pick_and_place.html) 及 Reveal.js 簡報紀錄個人所完成的內容.</li>
<li>各大組以 Pelican 網誌 (w7_pick_and_place.html) 及 Reveal.js 簡報摘要各大組任務執行結果.</li>
<li>各大組將所有完成的程式碼、編譯結果、MCAD 零組件檔案以及場景模擬檔案壓縮為 .7z (以 2ag1 大分組為例, 檔案名稱設為w7_pap_cd2022ag1.7z) 後, 送到組長的 @gm 帳號下的 <a href="https://www.microsoft.com/zh-tw/education/products/office">OneDrive</a> 共享區, 設定為只有 @gm 帳號登入者可以下載的共用權限後, 將連結發布在大組的 Pelican 網誌中.</li>
<li>各大組以程式方法執行上述任務的量化查驗後, 結合組員自評與互評流程後, 將各組員的評量結果存為 w7_cd2022ag1_evaluation.txt (以 2ag1 為例), 採允許各組組員與 yen@gm 共享下載進行設定.</li>
</ol>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/w7_pap/w7_pap.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div><h3>w7_summary</h3>
<p><a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/07fc8d08e6738f91f7f8042ff48385b4e10436bf/w7_a_summary.py">2a w7 summary 查驗</a> (<a href="/downloads/w7_project/w7_a_summary.txt">2a 有網誌者</a>)</p>
<p><a href="https://mde.tw/cd2022_guide/content/Brython?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/faffe2bd308016216ce19de21c38a6e33ea33a1f/w7_b_summary.py">2b w7 summary 查驗</a> (<a href="/downloads/w7_project/w7_b_summary.txt">2b 有網誌者</a>)</p>
<p>請各大組在分組 blog 區域加入一個 Slug: w7_summary 的工作摘要說明, 將本週課堂上每位組員的工作內容與進度列在網誌中, 並以連結導引至各組員的個人網站中.</p>
<h4>請各大組在摘要網誌中回答下列問題:</h4>
<ol>
<li>如何集結各大組組員在各週所完成的工作進度?</li>
<li>為何要在大組倉儲中建立 Reveal 投影片與 Pelican Blog? (<a href="https://gitbook.tw/chapters/using-git/git-blame">git blame 用法</a>)</li>
<li>可以利用 Leo Editor 延續開發 <a href="https://github.com/mdecourse/scarysim">scarysim</a> 程式功能嗎? (與 <a href="https://github.com/microsoft/vscode">VScode</a> 比較, 或者直接在 VScode 中使用 Leo Editor, <a href="https://github.com/boltex/leointeg">leointeg</a>)</li>
</ol>
<p>假如在各大組倉儲的 downloads 目錄中針對每週的任務進行分類, 例如: 建立 downloads/w7 目錄, 讓各組組員利用 users/學號.leo 編寫個人有關的 blog 或其他相關資料的導入或引用, 如此, 就可以在上課階段 (stage1) 或次週上課前 (stage2), 以手動或程式方法集合各組員的 blog, reveal 或 cmsimde 內容, 經過人工查核後, 直接發布在各大組的網頁、網誌或簡報上.</p>
<h4>協同重點:</h4>
<ol>
<li>各組員負責維護各自的 users/學號.leo, 每次提交推送並不會產生衝突.</li>
<li>經由 users/學號.leo 建立 downloads/w7 目錄中, 各組員根據學號或主題所提交推送的網誌、網頁或簡報片段資料, 若產生衝突, 將會比較容易進行檢查與合併.</li>
<li>透過已經處理衝突後的 downloads/w7 目錄資料, 由人工或程式集結各段落內容, 可以減少解決衝突的難度.</li>
</ol>
<p>Leo Editor 常用大綱標題指令:</p>
<p style="padding-left: 30px;">@path</p>
<p style="padding-left: 30px;">@edit 檔名</p>
<p style="padding-left: 30px;">@clean 檔名 + sub-outline 中的 @others</p>
<p style="padding-left: 30px;">@auto 檔名</p>
<p style="padding-left: 30px;">@button</p>
<p>@path mardown 表示隨後的 sub-outline 路徑都將位於 markdown 目錄之下.</p>
<p>@edit myfile.md 表示存檔後, 將在此節點所對應的路徑下, 修改或新建 myfile.md 檔案.</p>
<p>@clean myfile.md 表示存檔後, 將在此節點所對應的路徑下, 結合其子節點與上層 @others 所在位置的所有內容, 修改或新建 myfile.md 檔案.</p>
<p>以下程式片段, 存於節點對應的內容區後, 按下 ctrl + b 可以執行.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''Recursively import all python files in a directory and clean the result.'''

c.recursiveImport(
    dir_ = r'./',
    kind = '@clean', 
    safe_at_file = False,
    theTypes =  ['.py']
)</pre>
<h4>Reference:</h4>
<p style="padding-left: 30px;"><a href="https://leoeditor.com/tutorial.html">https://leoeditor.com/tutorial.html</a></p>
<p></p><h2>w8 任務</h2>
<p>任務一: 請依照下列步驟編譯 simExtMtb plugin 專案:</p>
<p><a href="/downloads/w7_project.7z">w7_project.7z</a></p>
<p>編譯 <a href="https://github.com/CoppeliaRobotics/simExtMTB">simExtMtb</a> plugin:</p>
<p>針對 simExtMtb.pro:</p>
<ol>
<li><a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EccOQ_vbC2FAqk59lpm3sMIB8L7T9hc1wKbT3dkz5Aa9MA?e=dLP7ql">CoppeliaSim 4.1.0 原始碼編譯專案</a> (登入 @gm OneDrive 後下載).</li>
<li>E:\downloads\cop410\programming\simExtMTB&gt;qmake -o Makefile simExtMtb.pro</li>
<li>E:\downloads\cop410\programming\simExtMTB&gt;mingw32-make -f Makefile.Release</li>
<li>在 release 目錄中取得 simExtMtb.dll, 啟動前放入 Coppeliasim 根目錄.</li>
</ol>
<p>任務二: 請各組依照下列零件檔案, 將組員分為三組, 分別以 Solvespace, NX (12, 1980 或 2008) 及 Onshape, 完成各零件<span style="background-color: #ffff99;">工程圖</span>與<span style="background-color: #ffff99;">組合圖</span>後, 將 uarm 組合件轉為 <span style="background-color: #ffff99;">STL 格式後轉入 CoppeliaSim</span>, 並安排以 GUI Slider 方式<span style="background-color: #ffff99;">控制前三軸作動</span>. 各組員需將零組件繪製過程與 CoppeliaSim 操控流程及心得, 寫為 Pelican Blog 與 Reveal.js 簡報, 並在期中考週將個人與分組網誌與簡報流程透過 Wink 製作為 mp4 影片嵌入個人與分組網頁, 流程中的 cmsimde H1 頁面命名為 <span style="background-color: #ffff99;">midterm</span>, 而網誌命名為 <span style="background-color: #ffff99;">midterm.html</span>, <span style="background-color: #ffff99;">簡報</span>則採 index.html 命名.</p>
<p>查驗項目:</p>
<ol>
<li>uarm 各零件工程圖</li>
<li>uarm 組合圖</li>
<li>uarm 組合圖 STL 格式轉入 CoppeliaSim</li>
<li>GUI slider 控制前三軸作動</li>
<li>cmsimde 中第一階頁面, 標題為 midterm</li>
<li>網誌名稱為 midterm.html</li>
<li>流程與心得簡報</li>
</ol>
<p><a href="https://cad.onshape.com/documents/3c81d3f7fc38f5da16eef9ed/w/f6d4616f188bc9425608890c/e/08936ec436f9e9668efeaefd?renderMode=0&amp;uiState=6254c8ae6d93450dec4bb2b2">Onshape 中的 uArm 組立圖</a></p>
<p><a href="/downloads/cd2022_uarm_nx12_imported.7z">cd2022_uarm_nx12_imported.7z</a></p>
<p><img alt="" height="191" src="/images/uarm_nx12.png" width="300"/></p>
<p>uarm 末端連桿尺寸:</p>
<p><img alt="" height="142" src="/images/末端連桿.png" width="300"/></p>
<h3>uarm 主體零件</h3>
<p>從 <a href="/downloads/cd2022_uarm_nx12_imported.7z">cd2022_uarm_nx12_imported.7z</a> 中的 <a href="/downloads/cd2022_uarm/uArmSwiftPro_UP1300_3D_hide_parts.prt">uArmSwiftPro_UP1300_3D_hide_parts.prt</a> 可整理出下列主體零件, 請問能否透過程式方法讀取下列零件後, 在 cmsimde 頁面中, 以 <a href="https://mde.tw/cd2022_guide/content/Threejs.html">Three.js 架構</a>列出這些主體零件?</p>
<p>前端通用件</p>
<p>前端關節</p>
<p>7mm 支撐柱</p>
<p>3mm 鋁支撐柱</p>
<p>三角形連桿軸承壓緊件</p>
<p>三角形連桿</p>
<p>絞鍊</p>
<p>主臂關節2</p>
<p>主臂關節1</p>
<p>電機軸承支撐座_左側</p>
<p>電機軸承支撐座_右側</p>
<p>右側曲柄</p>
<p>輸出軸</p>
<p>右側連桿</p>
<p>左側連桿</p>
<p>4mm 鋁支撐柱</p>
<p>減速箱上殼</p>
<p>L 型連接件</p>
<p>軸承支撐軸</p>
<p>軸承支撐圈</p>
<p>底座上蓋</p>
<p>底座中間部分</p>
<p>底座蓋</p>
<p>References:</p>
<p style="padding-left: 30px;"><a href="https://www.nxjournaling.com/content/convert-stl-file-solid-getting-started">從 STL 檔案轉為 non-parametric solid</a>.</p>
<p style="padding-left: 30px;"><a href="https://www.swooshtech.com/2018/04/13/taking-the-next-step-in-nx/">https://www.swooshtech.com/2018/04/13/taking-the-next-step-in-nx/</a></p>
<p style="padding-left: 30px;"><a href="https://www.nxjournaling.com/content/beginning-journaling-using-nx-journal">https://www.nxjournaling.com/content/beginning-journaling-using-nx-journal</a></p>
<p style="padding-left: 30px;">與 uarm 相同機構的 EvoArm: <a href="https://github.com/AliShug/EvoArm">https://github.com/AliShug/EvoArm</a> (採 Inventor 繪圖)</p><h1>Solvespace</h1>
<p>根據 <a href="https://mde.tw/cad2021/content/Compile%20Solvespace.html">https://mde.tw/cad2021/content/Compile%20Solvespace.html</a> 中的說明, 可以利用 <a href="https://drive.google.com/file/d/16L08jH3ZtoMeeGWBJrP9DuIk-cby_Wqw/view?usp=sharing">compile_copsim_for_cd2022.7z</a> (file size: 5 GB, extracted size: 17.3 GB), 完成編譯.</p>
<p>自行編譯 Solvespace 的目的是希望透過 <a href="https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm">https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm</a> 與 <a href="https://www.coppeliarobotics.com/helpFiles/en/importExport.htm">https://www.coppeliarobotics.com/helpFiles/en/importExport.htm</a> 的資訊, 自行在 Solvespace 中將組立檔案直接轉入 Coppeliasim 的場景檔案. 其中牽涉如何將 Solvespace 組立件中的零件檔案進行分割後, 以 <a href="https://en.wikipedia.org/wiki/STL">STL</a>、<a href="http://wiki.ros.org/urdf">URDF</a> 或 <a href="http://sdformat.org/">SDF</a> 格式直接轉入 Coppeliasim.</p><h1>NX</h1>
<p><a href="https://www.plm.automation.siemens.com/global/en/products/nx/">https://www.plm.automation.siemens.com/global/en/products/nx/</a></p>
<p><a href="https://www.plm.automation.siemens.com/global/en/products/nx/nx-for-design.html">https://www.plm.automation.siemens.com/global/en/products/nx/nx-for-design.html</a></p>
<p><a href="https://en.wikipedia.org/wiki/Siemens_NX">https://en.wikipedia.org/wiki/Siemens_NX</a></p>
<p><a href="http://toolnotes.com/home/engineering-graphics/siemens-nx-topics/nx-tutorials-version-1855/">View Commands</a> (<a href="https://www.youtube.com/watch?v=GUaa97tALxE">Video</a>):</p>
<p style="padding-left: 30px;">Zoom in and out<br/>    (roll mouse wheel)<br/>    MB2<br/>3D Orbit<br/>    (move mouse while holding in middle mouse wheel)<br/>    MB2<br/>Pan<br/>    (move mouse and right click button)<br/>    MB2 + MB3<br/>Twist view<br/>    MB2 + Slide along edges of screen<br/>Align view<br/>    F8</p><h2>NX3</h2>
<p>因為 NX 從 NX10 之後才支援 NXOpen for Python, 在 NX3 環境希望利用 Python 編寫延伸程式, 可以透過 UGOpen C 將延伸程式編譯為 Python 可以呼叫執行的動態連結程式庫, 然後間接透過 Python 驅動 NX3 的零組件延伸應用.</p>
<p>相關說明位於: <a href="https://github.com/mdecycu/cd2022_guide/tree/main/downloads/nx3_c_pyd">https://github.com/mdecycu/cd2022_guide/tree/main/downloads/nx3_c_pyd</a> (2004 年採用 <a href="https://netbeans.apache.org/">Netbean</a> 作為 IDE)</p>
<p>至於在 Windows 操作系統編譯 C/C++ 的環境, 則可以<a href="https://www.cnblogs.com/yucloud/p/vs_code_config.html">結合 VSCode 與 MSYS2</a>, 用於 NXOpen C/C++ 與 Python 的延伸開發.</p><h2>NX12</h2>
<p>NX12 於 2017.10 釋出, 完整安裝容量約 18 GB.</p>
<p>NX 自 NX10 之後支援 NXOpen Python API:</p>
<p style="padding-left: 30px;"><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/10/nx_api/en_US/custom/nxopen_python_ref">https://docs.plm.automation.siemens.com/data_services/resources/nx/10/nx_api/en_US/custom/nxopen_python_ref</a></p>
<p style="padding-left: 30px;"><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref">https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref</a></p>
<p style="padding-left: 30px;">利用 <a href="https://github.com/cjrh/easycython">https://github.com/cjrh/easycython</a> 將 .pyx 轉為 .pyd 後, 由 .py 導入後執行, 可<a href="https://medium.datadriveninvestor.com/using-easy-cython-to-speed-up-python-in-just-a-few-steps-fbda8d0cdeff">提升</a> Python 程式的執行速度. (<a href="https://www.laitimes.com/article/374w8_3nuce.html">參考</a>)</p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="/downloads/cd2022_uarm_nx12_imported.7z">cd2022_uarm_nx12_imported.7z</a></p>
<p style="padding-left: 30px;"><a href="https://slideplayer.com/slide/11624773/">https://slideplayer.com/slide/11624773/</a></p>
<p style="padding-left: 30px;"><a href="https://community.sw.siemens.com/s/topic/0TO4O000000MiiWWAS/nx-customization-and-programming">NX Customization and Programming Discussion</a></p>
<p style="padding-left: 30px;"><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/common/en_US/graphics/fileLibrary/nx/nxopen/nxopen_getting_started_v12.pdf">https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/common/en_US/graphics/fileLibrary/nx/nxopen/nxopen_getting_started_v12.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/common/en_US/graphics/fileLibrary/nx/snap/SNAP_Getting_Started_v12.pdf">https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/common/en_US/graphics/fileLibrary/nx/snap/SNAP_Getting_Started_v12.pdf</a></p>
<p style="padding-left: 30px;"></p><h2>NX1980</h2>
<p>NX1980 於 2021.06 釋出, 完整安裝容量約 28 GB.</p>
<h4>NX1980 參考頁面:</h4>
<p style="padding-left: 30px;">有關 Siemens NX 的歷史, 請參考 <a href="https://en.wikipedia.org/wiki/Siemens_NX">https://en.wikipedia.org/wiki/Siemens_NX</a></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cd2022/content/NX1980.html">https://mde.tw/cd2022/content/NX1980.html</a></p>
<p style="padding-left: 30px;">假如在系上網段, 可直接從 <a href="http://wcm.cycu.org:88">http://wcm.cycu.org:88</a> 下載.</p>
<p style="padding-left: 30px;"><a href="http://wcm.cycu.org:88">http://wcm.cycu.org:88</a> 中目前有三個與可攜 Python 程式有關的檔案, 有何差別, 建立的目的為何?</p>
<p style="padding-left: 60px;"><span style="background-color: #ffff99;">請注意: 以下的 .7z 檔案下載, 只允許在系上網段上下載</span>.</p>
<p style="padding-left: 60px;"><a href="http://wcm.cycu.org:88/compile_copsim_cd2022.7z">compile_copsim_cd2022.7z</a> (file size: 5 GB, extracted size: 17.3 GB, 包含除了 NX1980 之外的所有課程相關可攜程式套件, 是專門為 <a href="https://mde.tw/cd2022">cd2022</a> 課程學員打造的套件).</p>
<p style="padding-left: 60px;"><a href="http://wcm.cycu.org:88/portable_python_wcm2022.7z">portable_python_wcm2022.7z</a> (file size: 513 MB, extracted size: 17.3 G, 這是專門為 <a href="https://mde.tw/wcm2022">wcm2022</a> 課程打造的可攜程式套件, 適合選修學員下載後在任何 Windows 10 中以隨身碟啟動後操作)</p>
<p style="padding-left: 60px;"><a href="http://wcm.cycu.org:88/drive.7z">drive.7z</a> (file size: 2.6 MB, extracted size: 10 MB, 只包含 PUTTY, tcc, wscite 與 tmp 目錄, 採用 Hybrid 方式設定, 可與目前電腦輔助設計室中 SSD 硬碟所安裝的 Python 3.9.5 與 <a href="https://git-scm.com/download/win">Portablegit</a> 結合, 使用者只需自行設定啟動後的 home_ipv6 目錄與 home_ipv6/Desktop 目錄後即可以最輕薄便捷的方式將 SSH key 存入隨身碟, 並將個人與分組倉儲存入隨身碟啟動後的 tmp 目錄進行操作).</p>
<h4 style="padding-left: 30px;">問題:</h4>
<p style="padding-left: 60px;"><a href="http://wcm.cycu.org:88">http://wcm.cycu.org:88</a> 是如何建置的? (採純 IPv6 設定, 且只允許特定網段下載)</p>
<p style="padding-left: 90px;">使用 <a href="https://nginx.org/">Nginx</a>, 採用如下設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">worker_processes  1;
events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server {
        # port 80 僅開啟 IPv6 網路連線
        listen       [::]:80 default ipv6only=on;
        # 伺服器的符號名稱
        server_name  xxx.xxxx.xxx;
        return       301 https://$server_name$request_uri;
    }

   server {
       # 同時開啟 IPv4 與 IPv6 連線, port 設為 88
        listen       [::]:88 ipv6only=off;
        listen       88;
       # 允許系上 IPv4 網段連線
        allow 140.xxx.xx.0/24;
       # 允許特定單一 IPv4 電腦連線
        allow xxx.xxx.xxx.xx;
       # 允許系上 IPv6 網段連線
        allow 2001:xxx:xxxx:xx::0/32;
       # 其餘網段禁止連線
        deny all;
        location / {
            # 根目錄設定
            root X:/xxxxxx/xxxx/spring2022;
            }
        # 開啟 autoindex, 連線後會列出目錄下所有檔案內容
        autoindex on;
    }
}</pre>
<p style="padding-left: 60px;">可攜 NX1980 是如何建立的?</p>
<p style="padding-left: 90px;">利用 <a href="https://github.com/Bioruebe/UniExtract2">UniExtract2</a> 將 NX1980 安裝檔案解開後, 透過批次檔案設定啟動.</p>
<p style="padding-left: 60px;">如何讓 NX1980 認證伺服器 IPv6 相容?</p>
<p style="padding-left: 90px;">開啟伺服器的 IPv6 網路連線.</p>
<p style="padding-left: 60px;">Siemens NX 套件更新頻率?</p>
<p style="padding-left: 90px;">請參見 <a href="https://docs.plm.automation.siemens.com/tdoc/nx/1899/updating_nx_installation/#uid:index_xid1688897">Updating the NX Installation</a>.</p>
<p style="padding-left: 90px;">每 6 個月釋出一個大改版, 每個月則各有一次小改版.</p>
<p style="padding-left: 90px;">NX1980 為 2021/06 釋出的版本. 目前 2022/03 最新版本為 2007 系列 (<a href="https://www.youtube.com/watch?v=zjPQcJF94-E">What's new 2022/02 影片</a>), 其他各版資訊請參考 <a href="https://nxcadtips.com/docs/list-of-nx-versions-with-documentation-links/">https://nxcadtips.com/docs/list-of-nx-versions-with-documentation-links/</a></p>
<p style="padding-left: 60px;">如何學習利用 NX1980 進行 3D 零組件設計繪圖?</p>
<p style="padding-left: 90px;"><a href="https://docs.plm.automation.siemens.com/tdoc/nx/1847/nx_help">NX1847 nx_help</a></p>
<p style="padding-left: 90px;"><a href="https://docs.sw.siemens.com/en-US/release/209349590/NX%201980%20Series">NX1980 線上 Documentation</a></p>
<p style="padding-left: 90px;"><a href="https://www.youtube.com/watch?v=GUaa97tALxE&amp;list=PLzEsJue49U_EMMv0eBo8MNJjJOq_WHCrl">NX1855-1919 零組件設計繪圖</a>教學影片</p>
<p style="padding-left: 120px;">此一系列教學影片共有 38 個影片檔, 請各大組學員分別認領五個教學影片後, 以 Wink 製作教學影片後, 先將影片放入各自的 cd2022 網站中的 NX1980 H1 頁面中, 然後再整合至各小組與大組的協同網站中.</p>
<p style="padding-left: 120px;">有關電腦輔助設計室 IPv6 網路設定流程, 可以利用手機參考<a href="https://mde.tw/wcm2022_guide/content/IPv6%20setup.html">設定教學</a>後, 利用隨身碟中的<a href="https://github.com/mdecourse/wcm2022/discussions/2">批次檔案</a>進行設定.</p>
<p style="padding-left: 120px;">此階段的 NX1980 uArm 機械手臂零組件繪圖目的, 希望能以 NX1980 繪製 uArm (<a href="https://cad.onshape.com/documents/3c81d3f7fc38f5da16eef9ed/w/f6d4616f188bc9425608890c/e/08936ec436f9e9668efeaefd?renderMode=0&amp;uiState=6254c8ae6d93450dec4bb2b2">Onshpae 中的 uArm 組立檔</a>, 使用者可以在手機中安裝 Onshpe App (<a href="https://play.google.com/store/apps/details?id=com.onshape.app">Android</a>, <a href="https://apps.apple.com/us/app/onshape-3d-cad/id923421284">iPhone</a>) 後開啟 uArm 組立檔)</p>
<p style="padding-left: 120px;"><a href="/downloads/cd2022_uarm_nx12_imported.7z">cd2022_uarm_nx12_imported.7z</a></p>
<p style="padding-left: 60px;">NX1980 如何取得啟動授權?</p>
<p style="padding-left: 90px;">系上購買的 NX1980 教育版是透過網路連線取得啟動授權, 意即啟動 NX1980 時, 必須連接到系上的伺服器取得授權後, 才能開啟.</p>
<p style="padding-left: 90px;">假如是在校外, 可以透過 IPv4 或 IPv6 網路連線取得授權, 若在協同產品設計實習上課時段, 則只能透過 IPv6 協定連網, 因此使用者可以在 start_NX1980.bat 多台授權伺服器如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">set SPLM_LICENSE_SERVER=port@IPv4_server_address;port@[IPv6_server_address]</pre>
<p style="padding-left: 90px;">就能同時在不同網路連線情況下, 啟動 NX1980.</p>
<p style="padding-left: 90px;">以下的 bat 檔案, 能夠同時啟動 Python, Msys2 以及 NX1980:</p>
<p style="padding-left: 120px;"><a href="/downloads/start_ipv6_nx1980_bat.txt">start_ipv6_nx1980_bat.txt</a></p>
<p style="padding-left: 120px;">其中 Msys2 可用來編譯 Solvespace、SciTE、Fossil SCM 以及 CoppeliaSim, Python 可用來啟動個人動態與靜態網頁, 並透過 Leo Editor 編輯 Reveal.js 簡報.</p><h3>Start_NX1980</h3>
<p>NX1980 series 為 2021.06 的版本.</p>
<p>啟動 NX1980 全部模組, 容量約 28.6 GB.</p>
<p>start_nx1980_all.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

set HomePath=%Disk%:\home_mdecourse
set HomeDrive=%Disk%:\home_mdecourse
set Home=%Disk%:\home_mdecourse
set USERPROFILE=%Disk%:\home_mdecourse

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Disk%:\py373\DLLs;%Disk%:\py373\Lib;%Disk%:\py373\Lib\site-packages;
set PYTHONHOME=%Disk%:\py373

set path_python=%Disk%:\py373;%Disk%:\py373\Scripts;
set path_msys2=%Disk%:\msys64\mingw64\bin;
REM coreutils is for compiling fossil scm
set path_coreutils=%Disk%:\coreutils-5.3.0\bin;%Disk%:\depends22_x64;
set path_tcc=%Disk%:\tcc;
set path_cmake=%Disk%:\cmake-3.10.1-win64-x64\bin;
set path_nodejs=Disk%:\nodejs;%Disk%:\nodejs\appdata\roaming\npm;
set path_git=%Disk%:\portablegit\bin;
set path_xming=%Disk%:\Xming;
set path_latex=%%Disk%:\Pandoc;%Disk%:\TinyTeX\bin\win32;

REM for NX1980
REM use ipv6
set FNP_IP_PRIORITY=6
set UGII_BASE_DIR=%Disk%:\NX1980
set TMP_DIR=%Disk%:\tmp
set UGII_USER_PROFILE_DIR=%Disk%:\home_mdecourse
set START_DIR=%TMP_DIR%
set UGII_TMP_DIR=%TMP_DIR%
set UGII_USER_DIR=%Disk%:\tmp
set UGII_GROUP_DIR=%Disk%:\tmp
set UGII_SITE_DIR=%Disk%:\tmp
set UGII_BASE_DIR_CUSTOM=%UGII_BASE_DIR%

set SPLM_LICENSE_SERVER=28000@xxx.xxx.xx.xx;28000@[xxxx:xxx:xxxx:xx::xx];28000@192.168.56.3
set UGII_LANG=english

set UGII_ROOT_DIR=%UGII_BASE_DIR%\ugii
set UGS_LICENSE_BUNDLE=ACD10
set UGII_TEMPLATE_DIR=%UGII_ROOT_DIR%\templates
set ugpath=%UGII_BASE_DIR%\nxbin;%UGII_BASE_DIR%\ugii;%UGII_BASE_DIR%\NXBIN\Radical;%UGII_BASE_DIR%\NXBIN\managed;

path=%ugpath%;%path%;%Disk%:;%path_python%;%path_msys2%;%path_tcc%;%path_git%;%path_cmake%;%path_coreutils%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wscite415\wscite\SciTE.exe
start /MIN %Disk%:\wscite415\wscite\SciTE.exe

%UGII_BASE_DIR%\ugii\ugraf.exe -nx | start /d  %UGII_BASE_DIR%\ugii %UGII_BASE_DIR%\nxbin\simcenter3d.exe | %UGII_BASE_DIR%\ugii\ugraf.exe -layout | %UGII_BASE_DIR%\ugii\ugraf.exe -view | %UGII_BASE_DIR%\ugii\ugraf.exe -mechatronics | %UGII_BASE_DIR%\ugii\ugraf.exe -simviewer

Exit</pre>
<p>指啟動 NX1980 基本模組, 容量約 15 GB.</p>
<p>start_nx1980.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

set HomePath=%Disk%:\home_mdecourse
set HomeDrive=%Disk%:\home_mdecourse
set Home=%Disk%:\home_mdecourse
set USERPROFILE=%Disk%:\home_mdecourse

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Disk%:\py373\DLLs;%Disk%:\py373\Lib;%Disk%:\py373\Lib\site-packages;
set PYTHONHOME=%Disk%:\py373

set path_python=%Disk%:\py373;%Disk%:\py373\Scripts;
set path_msys2=%Disk%:\msys64\mingw64\bin;
REM coreutils is for compiling fossil scm
set path_coreutils=%Disk%:\coreutils-5.3.0\bin;%Disk%:\depends22_x64;
set path_tcc=%Disk%:\tcc;
set path_cmake=%Disk%:\cmake-3.10.1-win64-x64\bin;
set path_nodejs=Disk%:\nodejs;%Disk%:\nodejs\appdata\roaming\npm;
set path_git=%Disk%:\portablegit\bin;
set path_xming=%Disk%:\Xming;
set path_latex=%%Disk%:\Pandoc;%Disk%:\TinyTeX\bin\win32;

REM for NX1980
REM use ipv6
set FNP_IP_PRIORITY=6
set UGII_BASE_DIR=%Disk%:\NX1980
set TMP_DIR=%Disk%:\tmp
set UGII_USER_PROFILE_DIR=%Disk%:\home_mdecourse
set START_DIR=%TMP_DIR%
set UGII_TMP_DIR=%TMP_DIR%
set UGII_USER_DIR=%Disk%:\tmp
set UGII_GROUP_DIR=%Disk%:\tmp
set UGII_SITE_DIR=%Disk%:\tmp
set UGII_BASE_DIR_CUSTOM=%UGII_BASE_DIR%

set SPLM_LICENSE_SERVER=28000@xxx.xxx.xx.xx;28000@[xxxx:xxx:xxxx:xx::xx];28000@192.168.56.3
set UGII_LANG=english

set UGII_ROOT_DIR=%UGII_BASE_DIR%\ugii
set UGS_LICENSE_BUNDLE=ACD10,ACD11
set UGII_TEMPLATE_DIR=%UGII_ROOT_DIR%\templates
set ugpath=%UGII_BASE_DIR%\nxbin;%UGII_BASE_DIR%\ugii;%UGII_BASE_DIR%\NXBIN\Radical;%UGII_BASE_DIR%\NXBIN\managed;

path=%ugpath%;%path%;%Disk%:;%path_python%;%path_msys2%;%path_tcc%;%path_git%;%path_cmake%;%path_coreutils%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wscite415\wscite\SciTE.exe
start /MIN %Disk%:\wscite415\wscite\SciTE.exe

%UGII_BASE_DIR%\ugii\ugraf.exe -nx

Exit</pre>
<h3>Portable NX1980</h3>
<p>在 Windows 10 配置可攜 NX1980 程式, 需要:</p>
<ol>
<li><a href="https://github.com/Bioruebe/UniExtract2">https://github.com/Bioruebe/UniExtract2</a></li>
<li><a href="https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm">https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm</a></li>
</ol>
<p>等兩項工具, UniExtract2 用來解開 SiemensNX-1980_wntx64\nx\SiemensNX.msi, 以及 .msi, 而 wix 則用來解開 SiemensNX-1980_wntx64\nx\VC_redist.x64.exe</p>
<p>製作 Portable NX1980 的步驟請參考以下影片:</p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/w5_portable_nx1980/w5_portable_nx1980.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div><h3>NX1980_setup</h3>
<p>以下影片說明如何設定 Journal 存檔格式, 關閉 Product Execellence Program, 並查驗版本與授權使用單位:</p>
<p><a href="/downloads/w5_nx_api/w5_nx_api.txt">w5_nx_api.txt</a></p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/w5_nx_api/w5_nx_api.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div><h3>NXOpen</h3>
<p><a href="/downloads/NXOpen_spur_gear.c">NXOpen_spur_gear.c</a></p>
<p><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/1872/nx_api/common/en_US/graphics/fileLibrary/nx/nxopen/NXOpen_Getting_Started.pdf">Get Started with NXOpen.pdf</a> (2019)</p>
<p>NX10: <a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/10/nx_api/en_US/custom/nxopen_python_ref/index.html">https://docs.plm.automation.siemens.com/data_services/resources/nx/10/nx_api/en_US/custom/nxopen_python_ref/index.html</a></p>
<p>NX12: <a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/index.html">https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/index.html</a></p>
<p>NXOpen Python 程式範例:</p>
<p style="padding-left: 30px;"><a href="/downloads/nxopen/nxopen_ex1.py">nxopen_ex1.py</a></p>
<p style="padding-left: 30px;"><a href="/downloads/nxopen/nxopen_ex2.py">nxopen_ex2.py</a></p>
<p style="padding-left: 30px;"><a href="/downloads/nxopen/nxopen_ex3.py">nxopen_ex3.py</a></p>
<h4>Referene:</h4>
<p style="padding-left: 30px;"><a href="https://support.industrysoftware.automation.siemens.com/general/nx.shtml#lp-tab-1">NX 各版本技術手冊</a></p>
<p style="padding-left: 30px;"><a href="https://docs.plm.automation.siemens.com/tdoc/nx/1899/nx_help">https://docs.plm.automation.siemens.com/tdoc/nx/1899/nx_help</a> </p>
<p style="padding-left: 30px;">NX1980\NXBIN\managed\exceladdin_x64.dll</p>
<p style="padding-left: 30px;"><a href="/downloads/nxopen/ugii_env_ug.dat.txt">ugii_env_ug.dat.txt</a></p>
<p style="padding-left: 60px;">UGII_PYTHONPATH</p>
<p style="padding-left: 60px;">UGII_PYTHON_LIBRARY_DIR</p>
<p style="padding-left: 30px;"><a href="https://ntnuopen.ntnu.no/ntnu-xmlui/handle/11250/2656770">https://ntnuopen.ntnu.no/ntnu-xmlui/handle/11250/2656770</a> (Design of a KBE system for automatic weld path definition in CAD)</p><h3>UGOpen</h3>
<p>在 NX3 時代, 因為尚未支援採用 Python 編寫 API 延伸程式, 但仍可透過當時的 UGOpen C 編寫為 Python 可呼叫的 pyd 動態連結程式庫, 然後由 Python 程式主導後續的<a href="/downloads/nx3_c_pyd/nx3_c_pyd_integ.pdf">延伸應用</a>.</p>
<p><a href="/downloads/nx3_c_pyd/nx3_for_pyd.c">nx3_for_pyd.c</a></p>
<p><a href="/downloads/nx3_c_pyd/nx3_call_pyd.py">nx3_call_pyd.py</a></p>
<p><a href="/downloads/nx3_c_pyd/run_nx3_call_pyd.bat">run_nx3_call_pyd.bat</a></p>
<p><a href="/downloads/nx3_c_pyd/kmol_readme.txt">kmol_readme.txt</a></p>
<p><a href="https://nova.disfarm.unimi.it/manual/plugins/tcc-doc.htm">Tiny C Compiler</a> <a href="https://lists.nongnu.org/archive/html/tinycc-devel/2009-06/msg00043.html">可以</a>建立 dll 動態連結程式庫. 這樣有機會利用它來建立 UGOpen API 嗎?</p>
<p><a href="/downloads/UGOpen_spur_gear.c">UGOpen_spur_gear.c</a></p>
<p>NX10 之後已經支援 NXOpen Python, 因此接下來可利用 <a href="https://code.visualstudio.com/docs/cpp/config-mingw">Visual Studio Code</a> 作為 IDE, 用來開發 NX12 之後的 C/C++ 與 Python 整合應用的延伸程式.</p>
<h4>Reference:</h4>
<p style="padding-left: 30px;"><a href="https://iter01.com/614343.html">https://iter01.com/614343.html</a></p>
<p style="padding-left: 30px;"><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_ap">Get Started with NX Snap (2017).pdf</a></p>
<p style="padding-left: 30px;"><a href="https://docs.sw.siemens.com/en-US/product/209349590/doc/PL20200522120320484.gs_snap/pdf/?audience=external">Get Started with NX Snap</a> (2021)</p>
<p style="padding-left: 30px;"><a href="https://community.sw.siemens.com/s/topic/0TO4O000000MiiWWAS/nx-customization-and-programming">NX Custumization and Programming Discussions</a></p>
<p></p><h2>NX2008</h2>
<p>NX2008 於 2022.01 釋出, 屬於 NX2007 系列 (2021.12 釋出). 容量約 30 GB.</p>
<p><a href="https://github.com/Bioruebe/UniExtract2">https://github.com/Bioruebe/UniExtract2</a> 可用來解開 SiemensNX-2008_wntx64\nx\SiemensNX.msi, 但必須配合 SiemensNX-2008_wntx64\nx\VC_redist.x64.exe 的安裝或解壓縮檔案才能執行.</p>
<p>至於要解開 SiemensNX-2008_wntx64\nx\VC_redist.x64.exe 中的檔案, 可先利用 <a href="https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm">https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm</a> 中的 wix311-binaries.zip, 以 wix311-binaries\dark.exe vc_redist.x64.exe -x x64-extracted, 在 x64-extracted 目錄中取得 x64-extracted\AttachedContainer\packages\vcRuntimeMinimum_amd64\vc_runtimeMinimum_x64.msi 之後, 再利用 UniExtract2 解開所需的 dll 檔案後, 再放入 NXBIN 目錄.</p>
<p>NX2008 啟動方式同 NX1980.</p>
<h2>Research</h2>
<p>NX12, NX1980 與 NX2008 的動態連結程式庫位於 NXBIN\python 目錄中.</p>
<p><a href="https://ieeexplore.ieee.org/document/8076193">Implementation of recognition algorithm with NXOpen API in siemens NX</a> (2017)</p>
<p><a href="https://ieeexplore.ieee.org/document/8725312">The Method of Automatic Determination of the Types of Spatial Angles in 3D Models of CAD Systems</a> (2019)</p>
<p>能不能利用 <a href="/downloads/NXOpen_Getting_Started_2019.pdf">NXOpen_Getting_Started_2019.pdf</a> 中的程式庫,  自動從 <a href="/downloads/cd2022_uarm_nx12_imported.7z">cd2022_uarm_nx12_imported.7z</a> 中的零件, 整理出對應的工程圖? 甚至根據這些零件的關鍵尺寸"自動建立對應的參數化零件檔案?</p>
<p>根據<a href="https://www.eng-tips.com/viewthread.cfm?qid=328072">這裡</a>的說明, 利用 Visual Basic 列出零件陣列的程式段為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Dim partDimensions() As Annotations.Dimension
partDimensions = workPart.Dimensions.ToArray </pre>
<p>從 <a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/index.html">NX12 NXOpen Python Reference</a> (同 <a href="http://c.cycu.org">http://c.cycu.org</a>), 與 Annotations.Dimension 相關的資料在<a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_python_ref/NXOpen.Annotations.Dimension.html?highlight=dimension">這裡</a> (或<a href="http://c.cycu.org/NXOpen.Annotations.Dimension.html?highlight=dimension">這裡</a>). 可以試著以 Python 根據這裡的<a href="https://stackoverflow.com/questions/16953842/using-os-walk-to-recursively-traverse-directories-in-python">說明</a>, 透過 os.walk(), 進入 NX 零件目錄後, 逐一取出各個零件檔案, 並以 for 迴圈列出相關幾何尺寸:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">theSession  = NXOpen.Session.GetSession()
workPart = theSession.Parts.Work
 
# 利用迴圈列出 workPark 中的所有尺寸
for dim in workPart.Dimensions:</pre>
<p>也可以從<a href="https://community.sw.siemens.com/s/question/0D54O000061xM7nSAE/check-if-dimension-is-cylindrical">這裡</a>的討論中, 取出參考用的 NXOpen Python 程式段:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">    for  dim in workPart.Dimensions:
    	linearDimensionBuilder = workPart.Dimensions.CreateLinearDimensionBuilder(dim)
    	method = linearDimensionBuilder.Measurement.Method
    	linearDimensionBuilder.Destroy()
     
    	#   check if measurement is cylindrical (see ref: https://docs.plm.automation.siemens.com/data_services/resources/nx/10/nx_api/en_US/custom/nxopen_python_ref/NXOpen.Annotations.DimensionMeasurementBuilderMeasurementMethod.html#NXOpen.Annotations.DimensionMeasurementBuilderMeasurementMethod)
    	if method == 5:</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">    #report dimension type
    #
     
    import NXOpen
    import NXOpen.UF
     
    theSession = NXOpen.Session.GetSession()
    theLw = theSession.ListingWindow
    theUfSession = NXOpen.UF.UFSession.GetUFSession()
        
        
    def main(): 
     
        workPart = theSession.Parts.Work
        displayPart = theSession.Parts.Display
        
        theLw.Open()
        
        for  dim in workPart.Dimensions:
            theLw.WriteLine(str(type(dim)))
            if type(dim).__name__ == 'CylindricalDimension':
                theLw.WriteLine("Cylindrical dimension found!")
        theLw.Close()
        
        
    if __name__ == '__main__':
        main()</pre>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/watch?v=l9Lq3D4AMAQ">https://www.youtube.com/watch?v=l9Lq3D4AMAQ</a></p>
<p style="padding-left: 30px;"><a href="http://www.nxjournaling.com/content/get-all-dimensions-formula-set-value">http://www.nxjournaling.com/content/get-all-dimensions-formula-set-value</a></p>
<p style="padding-left: 30px;"><a href="http://www.nxjournaling.com/content/expressions-query-existing-expressions">http://www.nxjournaling.com/content/expressions-query-existing-expressions</a></p>
<p style="padding-left: 30px;"><a href="https://nxopen1.rssing.com/chan-61486962/all_p16.html">https://nxopen1.rssing.com/chan-61486962/all_p16.html</a></p>
<p style="padding-left: 30px;"><a href="https://smartech.gatech.edu/bitstream/handle/1853/62626/RAMAMURTHY-DISSERTATION-2019.pdf">A REINFORCEMENT LEARNING FRAMEWORK FOR THE AUTOMATION OF ENGINEERING DECISIONS IN COMPLEX SYSTEMS</a></p>
<p style="padding-left: 30px;"><a href="https://aaltodoc.aalto.fi/bitstream/handle/123456789/44315/master_Korhonen_Konsta_2020.pdf?sequence=1&amp;isAllowed=y">Design of an engineer-to-order product configuration with CAD integration</a></p>
<p style="padding-left: 30px;"><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_net/class_n_x_open_1_1_sketch.html#ad0e5c9fa4361cc5f63386b800a14dbf1">https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/nxopen_net/class_n_x_open_1_1_sketch.html#ad0e5c9fa4361cc5f63386b800a14dbf1</a></p>
<p style="padding-left: 30px;"><a href="https://www.nxjournaling.com/content/how-i-stopped-worrying-and-learned-love-help-file">https://www.nxjournaling.com/content/how-i-stopped-worrying-and-learned-love-help-file</a> </p>
<p style="padding-left: 30px;"><a href="https://www.sciencedirect.com/science/article/pii/S2351978920319995">Object-oriented approach to product design using extended NX Open API</a></p>
<p style="padding-left: 30px;"><a href="https://www.tandfonline.com/doi/full/10.1080/23311916.2019.1665396?scroll=top&amp;needAccess=true">Multi-objective spur gear design using teaching learning-based optimization and decision-making techniques</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/marmakoide/gear-profile-generator">https://github.com/marmakoide/gear-profile-generator</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/ZiniuLu/SmartConverter">https://github.com/ZiniuLu/SmartConverter</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/chiamingyen/mdeCourse">https://github.com/chiamingyen/mdeCourse</a> </p>
<p style="padding-left: 30px;"><a href="https://community.sw.siemens.com/s/question/0D54O000061xBkLSAU/spur-gear-creation">NXOpen Spur Gear Creation</a></p>
<p style="padding-left: 60px;"><a href="https://www.grobinc.com/spur-gears/">https://www.grobinc.com/spur-gears/</a> </p>
<p style="padding-left: 60px;"><a href="https://ieeexplore.ieee.org/document/6052107">The Discussion of Spur Gear Library System Based on UG/Open</a></p>
<p style="padding-left: 60px;">The dlx file must be placed in one of the following locations:<br/><br/>1. From where NX session is launched<br/><br/>2. $UGII_USER_DIR/application<br/><br/>3. For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly<br/><br/>recommended. This variable is set to a full directory path to a file</p>
<p></p><h1>Onshape</h1>
<p>以 <a href="https://cad.onshape.com/documents/3c81d3f7fc38f5da16eef9ed/w/f6d4616f188bc9425608890c/e/08936ec436f9e9668efeaefd?renderMode=0&amp;uiState=6254c8ae6d93450dec4bb2b2">Onshape 中的 uArm robot</a>. (並未自行繪製零組件而是從 <a href="/downloads/cd2022_uarm/UTF8_uArmSwiftPro_UP1300_3D.STEP">uArmSwiftPro_UP1300_3D.STEP</a> import)</p><h1>Coppeliasim</h1>
<p>根據 <a href="https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm">https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm</a> 中有關 simple format 的說明, 可直接將 uArm 機械手臂在 NX 中的零組件, 透過 NXOpen Python API 的程式轉為 CoppeliaSim 的 Scene hierarchy 組合狀態.</p>
<p>如此便將 uArm 機械手臂各零組件參數化, 然後直接在 Brython 前端介面設定 uArm 機械手臂的設計參數, 經由 AJAX 將參數送至後端 Flask + NXOpen Python API 伺服器, 產生 uArm 機械手臂組合場景後, 再透過 <a href="https://www.coppeliarobotics.com/helpFiles/en/legacyRemoteApiOverview.htm">Legacy Python remote API</a> 或 <a href="https://www.coppeliarobotics.com/helpFiles/en/zmqRemoteApiOverview.htm">ZeroMQ Python remote API</a> 控制 uArm 機械手臂 (或利用 <a href="https://www.ensta-bretagne.fr/zerr/dokuwiki/doku.php?id=vrep:socket-com-with-robot">Socket 傳遞控制參數</a>), 並以客製化 image sensor 的<a href="https://forum.coppeliarobotics.com/viewtopic.php?t=3457">影像串流</a>從 Flask server 送至各協同成員的瀏覽器, 或採 <a href="https://www.coppeliarobotics.com/helpFiles/en/externalFrontEnd.htm">Web browser based frontend</a> 方式呈現控制流程.</p>
<p><a href="https://www.york.ac.uk/media/electronic-engineering/welcome/Simulation%20Challenge%20-%20Python%20Scripting.pdf">https://www.york.ac.uk/media/electronic-engineering/welcome/Simulation%20Challenge%20-%20Python%20Scripting.pdf</a></p>
<p><a href="http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_CoppeliaSim_Simulator">http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_CoppeliaSim_Simulator</a></p>
<p><a href="https://www.doc.ic.ac.uk/~ajd/Robotics/RoboticsResources/questions1.pdf">https://www.doc.ic.ac.uk/~ajd/Robotics/RoboticsResources/questions1.pdf</a></p>
<p><a href="https://github.com/stepjam/PyRep">https://github.com/stepjam/PyRep</a></p>
<p><a href="https://www.diva-portal.org/smash/get/diva2:1569215/FULLTEXT02.pdf">https://www.diva-portal.org/smash/get/diva2:1569215/FULLTEXT02.pdf</a></p>
<p><a href="https://github.com/abr/abr_control">https://github.com/abr/abr_control</a></p>
<hr/>
<p>利用 <a href="https://www.sympy.org">sympy</a> 根據 <a href="https://00873727922344666445.googlegroups.com/attach/286bbfb50ffde/MeArmPiTechnicalOverviewV0-1DRAFT.pdf?part=0.1&amp;view=1&amp;vt=ANaJVrGDe9LZ85pOQHyyD3YHg6RH_YMlaNxrwQbU1krMBmaDI6eM4g_K1qbkavpOFbSeHZMHSwN39Dn-VAQ9R8gXlPgNOu6lpwVM53o1SePKtQUe3UtGjEM">meArm Pi Technical Overview</a> 中的說明 (修正錯誤後), 解出 Inverse Kinematics 如下:</p>
<p>當已知 manimpulator 端點的座標為 (x, y ,z) 時, 求 theta, ltheta (low arm link theta) 與 utheta (upper arm link theta). 利用 <a href="https://www.sympy.org">sympy</a> 之前必須先以 pip install sympy 安裝模組.</p>
<p><a href="/downloads/ik/mearm_ik_sympy.py">mearm_ik_sympy.py</a></p>
<p>使用者可以設法在 CoppeliaSim meArm 場景中驗證上述推導是否正確, 並與 <a href="https://github.com/yorkhackspace/meArm">https://github.com/yorkhackspace/meArm</a> 中的控制運算進行比較.</p>
<h4>CoppeliaSim 編譯:</h4>
<p style="padding-left: 30px;"><a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EccOQ_vbC2FAqk59lpm3sMIB8L7T9hc1wKbT3dkz5Aa9MA?e=dLP7ql">CoppeliaSim 4.1.0 原始碼編譯專案</a> (登入 @gm OneDrive 後下載).</p>
<p style="padding-left: 30px;"><a href="http://wcm.cycu.org:88/github/copsim410">CoppeliaSim 從 4.1.0 的 help files</a> (只能在系上以 IPv6 網路連線).</p>
<p style="padding-left: 30px;"><a href="http://wcm.cycu.org:88/github/cad2021/content/Task7-1-1.html">CoppeliaSim 編譯說明 1</a> (只能在系上以 IPv6 網路連線).</p>
<p style="padding-left: 30px;"><a href="http://wcm.cycu.org:88/github/cad2021/content/Compile%20CoppeliaSim.html">CoppeliaSim 編譯</a> (只能在系上以 IPv6 網路連線).</p>
<p></p><h1>Tic-Tat-Toe</h1>
<p><a href="https://techvidvan.com/tutorials/python-game-project-tic-tac-toe/">https://techvidvan.com/tutorials/python-game-project-tic-tac-toe/</a></p>
<p><a href="https://www.geeksforgeeks.org/tic-tac-toe-game-with-gui-using-tkinter-in-python/">https://www.geeksforgeeks.org/tic-tac-toe-game-with-gui-using-tkinter-in-python/</a></p>
<p><a href="https://www.universal-robots.com/products/ur10-robot/">UR10e</a> Robot 透過影像辨識與人進行 <a href="https://en.wikipedia.org/wiki/Tic-tac-toe">Tic-Tat-Toe</a> 遊戲:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/e1qtmZxMd6A" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://mde.tw/cd2022">cd2022</a> 則希望透過 <a href="https://www.ufactory.cc/pages/uarm">uArm</a> robot 搬動 OX 棋子的方式進行 <a href="https://en.wikipedia.org/wiki/Tic-tac-toe">Tic-Tat-Toe</a> 遊戲.</p>
<h4 style="padding-left: 30px;">Tic-Tat-Toe:</h4>
<p style="padding-left: 60px;"><a href="https://www.cormerica.com/robot-tic-tac-toe/">https://www.cormerica.com/robot-tic-tac-toe/</a></p>
<p style="padding-left: 60px;"><a href="/downloads/Playing_Tic-Tac-Toe_Using_Genetic_Neural_Network_with_Double_transfer_functions.pdf">Playing_Tic-Tac-Toe_Using_Genetic_Neural_Network_with_Double_transfer_functions.pdf</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/eSUk08d5Zjc" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/w5Oftm3l2uQ" title="YouTube video player" width="560"></iframe></p>
<h4 style="padding-left: 30px;">uArm 資料:</h4>
<p style="padding-left: 60px;"><a href="https://www.trossenrobotics.com/uarm-swift-pro.aspx">https://www.trossenrobotics.com/uarm-swift-pro.aspx</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/uArm-Developer/UArmForArduino">https://github.com/uArm-Developer/UArmForArduino</a></p>
<p style="padding-left: 60px;"><a href="https://uarm-developer.github.io/UArmForArduino/">https://uarm-developer.github.io/UArmForArduino/</a></p>
<p>且 uArm robot 的零組件要求分別由 Solvespace, NX1980 與 Onshape 執行設計繪圖後轉入 Coppeliasim 場景完成機電資系統模擬.</p>
<p>其中 uArm 原型零件採用 3D 列印或雷射切割的製造過程可依照 <a href="https://mde.tw/cd2022/content/Realizable.html">Realization</a> 頁面中的模擬系統進行, 並包括齒輪減速機的設計運算與 <a href="https://wokwi.com/arduino/libraries/Servo/Sweep">Arduino 伺服馬達的控制模擬</a>.</p>
<h4>uArm 零組件:</h4>
<p style="padding-left: 30px;">以 <a href="https://cad.onshape.com/documents/3c81d3f7fc38f5da16eef9ed/w/f6d4616f188bc9425608890c/e/08936ec436f9e9668efeaefd?renderMode=0&amp;uiState=6254c8ae6d93450dec4bb2b2">Onshape 中的 uArm robot</a>. (並未自行繪製零組件而是從 <a href="/downloads/cd2022_uarm/UTF8_uArmSwiftPro_UP1300_3D.STEP">uArmSwiftPro_UP1300_3D.STEP</a> import)</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2022_uarm_nx12_imported.7z">cd2022_uarm_nx12_imported.7z</a></p><h2>Threejs</h2>
<p>假如能夠在 server 端配置 NX + Flask 延伸應用程式, 並讓 Brython 前端程式操控產品設計參數, 完成後的零組件將可在轉為 OBJ 格式後, 直接展示在客戶端的瀏覽器中.</p>
<p><a href="https://jayconsystems.com/blog/exporting-3d-files-stl-vs-obj-vs-iges-vs-step">https://jayconsystems.com/blog/exporting-3d-files-stl-vs-obj-vs-iges-vs-step</a> </p>
<p><a href="https://threejs.org/">https://threejs.org/</a></p>
<p><iframe frameborder="0" height="300" src="/downloads/threejs_ex/index.html" width="300"></iframe></p>
<p><iframe frameborder="0" height="300" src="/downloads/threejs_ex/ex1/asm.html" width="300"></iframe></p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/en/externalFrontEnd.htm">https://www.coppeliarobotics.com/helpFiles/en/externalFrontEnd.htm</a></p><h1>run</h1>
<p>
<script src="/static/brython.js">
</script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<!-- Cango 程式庫 -->
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<!-- for Konva 程式庫 -->
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><button id="add1to100">add 1 to 100</button><button id="p261">p261</button><button id="rocflag">ROC flag</button><button id="procflag">PROC flag</button><button id="usaflag">USA flag</button><button id="drawgrid">Draw Grid</button><button id="grid_rect">Random Rect</button><button id="rect_walk">Rect Walk</button><button id="rect_u_walk">Rect U Walk</button><button id="rect_rev_u_walk">Rect rev U Walk</button><button id="sgcr">單節貪食蛇</button><button id="cfrr">5 個紅點方塊</button><button id="snake">Snake</button><button id="bsnake">BSnake</button><button id="auto_guess">auto_guess</button><button id="ball">ball</button><button id="bezier">bezier</button><button id="big_lotto">big_lotto</button><button id="brython_kw">brython_kw</button><button id="bunny">bunny</button><button id="cango_spur">cango_spur</button><button id="cango_spur1">cango_spur1</button><button id="cango_three_gears">cango_three_gears</button><button id="clear">clear</button><button id="clock">clock</button><button id="convert_temp">convert_temp</button><button id="deepmerge">deepmerge</button><button id="display_stl">display_stl</button><button id="draw">draw</button><button id="ex1">ex1</button><button id="ex2">ex2</button><button id="ex3">ex3</button><button id="ex4">ex4</button><button id="fibo">fibo</button><button id="fourbar">fourbar</button><button id="grp2a_2022">grp2a_2022</button><button id="grp_2022">grp_2022</button><button id="guess_a_number">guess_a_number</button><button id="hw1_1">hw1_1</button><button id="hw1_2">hw1_2</button><button id="keycode">Keycode</button><button id="knova1">knova1</button><button id="merge3">merge3</button><button id="power_lotto">power_lotto</button><button id="spur">spur</button><button id="spur_w_form">spur_w_form</button><button id="stl_binary_ascii">stl_binary_ascii</button><button id="stl_writer">stl_writer</button><button id="tetris">Tetris</button><button id="turtle1">turtle1</button><button id="turtle2">turtle2</button><button id="turtle3">turtle3</button><button id="turtle4">turtle4</button><button id="turtle5">turtle5</button><button id="turtle6">turtle6</button><button id="turtle7">turtle7</button><button id="turtle8">turtle8</button><button id="twl_link_ik">twl_link_ik</button><button id="webcam">webcam</button><button id="websocket">websocket</button><button id="ycqsort">ycqsort</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<p><!-- 這裡的畫布 id 為 brython_div --></p>
<div id="brython_div"></div>
<!-- graphics-column is for ggame -->
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ######################  editor1 結束 ###################### --></p>
<p><!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 以上為內建程式, 頁面可透過 ?src=gist_url 執行 --></p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
################################## rocflag start
rocflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/roc_flag.py"
rocflag = button2(rocflag_url)
doc["rocflag"].bind("click", rocflag.do)
################################## rocflag end
################################## procflag start
procflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/proc_flag.py"
procflag = button2(procflag_url)
doc["procflag"].bind("click", procflag.do)
################################## rocflag end
################################## drawgrid start
drawgrid_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/070f424f2e9a99617009af216762163f66628e6d/draw_grid.py"
drawgrid = button2(drawgrid_url)
doc["drawgrid"].bind("click", drawgrid.do)
################################## drawgrid end
################################## grid_rect start
grid_rect_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/f3683ed24646f63625b616e9cb8e61a9a08ae9be/draw_grid_random_rect.py"
grid_rect = button2(grid_rect_url)
doc["grid_rect"].bind("click", grid_rect.do)
################################## grid_rect end
################################## rect_walk start
rect_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/fdf9749488a59f00c2398aede8b6cbe8c0ed5d81/rect_walk.py"
rect_walk = button2(rect_walk_url)
doc["rect_walk"].bind("click", rect_walk.do)
################################## rect_walk end
################################## rect_walk start
rect_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/63645d3f5823fd22bdb02e840e46e551afee4087/rect_u_walk.py"
rect_u_walk = button2(rect_u_walk_url)
doc["rect_u_walk"].bind("click", rect_u_walk.do)
################################## rect_walk end
################################## rect_rev_u_walk start
rect_rev_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/165e7792091d4b91b9923592242bfaf28258a719/rect_rev_u_walk.py"
rect_rev_u_walk = button2(rect_rev_u_walk_url)
doc["rect_rev_u_walk"].bind("click", rect_rev_u_walk.do)
################################## rect_rev_u_walk end
################################## single green chasing red start
sgcr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/9f7c1cda3a51b061cde00d104054fb3ce19ffd1a/single_green_chasing_red.py"
sgcr = button2(sgcr_url)
doc["sgcr"].bind("click", sgcr.do)
################################## single green chasing red end
################################## chasing 5 red rect start
# execute only one time
#cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/c43844d62a0bd7eb6617d5222ba93b5de033a63f/chasing_5_red_rect.py"
# continuously execution
cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py"
cfrr = button2(cfrr_url)
doc["cfrr"].bind("click", cfrr.do)
################################## chasing 5 red rect end
################################## usaflag start
usaflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/144b62fa07987d5ab6f369ae3661c645405e1872/usaflag.py"
usaflag = button2(usaflag_url)
doc["usaflag"].bind("click", usaflag.do)
################################## usaflag end
################################## snake start
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/f29309745a98687ed5c41cf90d28ef25a1e48dd4/snake_brython_div.py"
snake = button2(snake_url)
doc["snake"].bind("click", snake.do)
################################## snake end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecourse/2a8f213b6858a40481d17556c8a2fe86/raw/0a4a824493865dc7cf56977d03c9438d002b4268/kmlo_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## auto_guess start
auto_guess_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/auto_guess.py"
auto_guess = button2(auto_guess_url)
doc["auto_guess"].bind("click", auto_guess.do)
################################## auto_guess end
################################## ball start
ball_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ball.py"
ball = button2(ball_url)
doc["ball"].bind("click", ball.do)
################################## ball end
################################## bezier start
bezier_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/79794cbd97d0846e2c9df14d54118d5e00a97a22/bezier.py"
bezier = button2(bezier_url)
doc["bezier"].bind("click", bezier.do)
################################## bezier end
################################## big_lotto start
big_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/big_lotto.py"
big_lotto = button2(big_lotto_url)
doc["big_lotto"].bind("click", big_lotto.do)
################################## big_lotto end
################################## brython_kw start
brython_kw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/brython_kw.py"
brython_kw = button2(brython_kw_url)
doc["brython_kw"].bind("click", brython_kw.do)
################################## brython_kw end
################################## bunny start
bunny_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/bunny.py"
bunny = button2(bunny_url)
doc["bunny"].bind("click", bunny.do)
################################## bunny end
################################## cango_spur start
cango_spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur.py"
cango_spur = button2(cango_spur_url)
doc["cango_spur"].bind("click", cango_spur.do)
################################## cango_spur end
################################## cango_spur1 start
cango_spur1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur1.py"
cango_spur1 = button2(cango_spur1_url)
doc["cango_spur1"].bind("click", cango_spur1.do)
################################## cango_spur1 end
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## clear start
clear_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clear.py"
clear = button2(clear_url)
doc["clear"].bind("click", clear.do)
################################## clear end
################################## clock start
clock_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clock.py"
clock = button2(clock_url)
doc["clock"].bind("click", clock.do)
################################## clock end
################################## convert_temp start
convert_temp_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/convert_temp.py"
convert_temp = button2(convert_temp_url)
doc["convert_temp"].bind("click", convert_temp.do)
################################## convert_temp end
################################## display_stl start
display_stl_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/display_stl.py"
display_stl = button2(display_stl_url)
doc["display_stl"].bind("click", display_stl.do)
################################## display_stl end
################################## draw start
draw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/draw.py"
draw = button2(draw_url)
doc["draw"].bind("click", draw.do)
################################## draw end
################################## ex1 start
ex1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex1.py"
ex1 = button2(ex1_url)
doc["ex1"].bind("click", ex1.do)
################################## ex1 end
################################## ex2 start
ex2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex2.py"
ex2 = button2(ex2_url)
doc["ex2"].bind("click", ex2.do)
################################## ex2 end
################################## ex3 start
ex3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex3.py"
ex3 = button2(ex3_url)
doc["ex3"].bind("click", ex3.do)
################################## ex3 end
################################## ex4 start
ex4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex4.py"
ex4 = button2(ex4_url)
doc["ex4"].bind("click", ex4.do)
################################## ex4 end
################################## fourbar start
fourbar_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fourbar.py"
fourbar = button2(fourbar_url)
doc["fourbar"].bind("click", fourbar.do)
################################## fourbar end
################################## guess_a_number start
guess_a_number_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/guess_a_number.py"
guess_a_number = button2(guess_a_number_url)
doc["guess_a_number"].bind("click", guess_a_number.do)
################################## guess_a_number end
################################## hw1_1 start
hw1_1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-1.py"
hw1_1 = button2(hw1_1_url)
doc["hw1_1"].bind("click", hw1_1.do)
################################## hw1_1 end
################################## hw1_2 start
hw1_2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-2.py"
hw1_2 = button2(hw1_2_url)
doc["hw1_2"].bind("click", hw1_2.do)
################################## hw1-2 end
################################## knova1 start
knova1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/konva1.py"
knova1 = button2(knova1_url)
doc["knova1"].bind("click", knova1.do)
################################## knova1 end
################################## power_lotto start
power_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/power_lotto.py"
power_lotto = button2(power_lotto_url)
doc["power_lotto"].bind("click", power_lotto.do)
################################## power_lotto end
################################## spur start
spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur.py"
spur = button2(spur_url)
doc["spur"].bind("click", spur.do)
################################## spur end
################################## spur_w_form start
spur_w_form_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur_w_form.py"
spur_w_form = button2(spur_w_form_url)
doc["spur_w_form"].bind("click", spur_w_form.do)
################################## spur_w_form end
################################## stl_binary_ascii start
stl_binary_ascii_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_binary_ascii.py"
stl_binary_ascii = button2(stl_binary_ascii_url)
doc["stl_binary_ascii"].bind("click", stl_binary_ascii.do)
################################## stl_binary_ascii end
################################## stl_writer start
stl_writer_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_writer.py"
stl_writer = button2(stl_writer_url)
doc["stl_writer"].bind("click", stl_writer.do)
################################## stl_writer end
################################## turtle1 start
turtle1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle1.py"
turtle1 = button2(turtle1_url)
doc["turtle1"].bind("click", turtle1.do)
################################## turtle1 end
################################## turtle2 start
turtle2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle2.py"
turtle2 = button2(turtle2_url)
doc["turtle2"].bind("click", turtle2.do)
################################## turtle2 end
################################## turtle3 start
turtle3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle3.py"
turtle3 = button2(turtle3_url)
doc["turtle3"].bind("click", turtle3.do)
################################## turtle3 end
################################## turtle4 start
turtle4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle4.py"
turtle4 = button2(turtle4_url)
doc["turtle4"].bind("click", turtle4.do)
################################## turtle4 end
################################## turtle5 start
turtle5_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle5.py"
turtle5 = button2(turtle5_url)
doc["turtle5"].bind("click", turtle5.do)
################################## turtle5 end
################################## turtle6 start
turtle6_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle6.py"
turtle6 = button2(turtle6_url)
doc["turtle6"].bind("click", turtle6.do)
################################## turtle6 end
################################## turtle7 start
turtle7_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle7.py"
turtle7 = button2(turtle7_url)
doc["turtle7"].bind("click", turtle7.do)
################################## turtle7 end
################################## turtle8 start
turtle8_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle8.py"
turtle8 = button2(turtle8_url)
doc["turtle8"].bind("click", turtle8.do)
################################## turtle8 end
################################## twl_link_ik start
twl_link_ik_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/twl_link_ik.py"
twl_link_ik = button2(twl_link_ik_url)
doc["twl_link_ik"].bind("click", twl_link_ik.do)
################################## twl_link_ik end
################################## webcam start
webcam_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/webcam.py"
webcam = button2(webcam_url)
doc["webcam"].bind("click", webcam.do)
################################## webcam end
################################## ycqsort start
ycqsort_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ycqsort.py"
ycqsort = button2(ycqsort_url)
doc["ycqsort"].bind("click", ycqsort.do)
################################## ycqsort end
################################## fibo start
fibo_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fibo_ex.py"
fibo = button2(fibo_url)
doc["fibo"].bind("click", fibo.do)
################################## fibo end
################################## deepmerge start
deepmerge_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e89e0f978a015bf9361270a389a5b84e6244ed5b/deepmerge.py"
deepmerge = button2(deepmerge_url)
doc["deepmerge"].bind("click", deepmerge.do)
################################## deepmerge end
################################## merge3 start
merge3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/8a7452a451e57e4de720f22fc2fc8abd6aac0bc8/merge3.py"
merge3 = button2(merge3_url)
doc["merge3"].bind("click", merge3.do)
################################## merge3 end
################################## websocket start
websocket_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/86dda666271974d6c520086700db14a2124f0ae8/websocket.py"
websocket = button2(websocket_url)
doc["websocket"].bind("click", websocket.do)
################################## websocket end
################################## keycode start
keycode_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/ba159101705aaf8ba182a442b455425a48a85610/keycode.py"
keycode = button2(keycode_url)
doc["keycode"].bind("click", keycode.do)
################################## keycode end
################################## tetris start
tetris_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/738223b424c3f5f12961070aa8a75185177420b6/pygame_to_brython_tetris.py"
tetris = button2(tetris_url)
doc["tetris"].bind("click", tetris.do)
################################## tetris end
################################## grp_2022 start
# for 2b
grp_2022_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/2ffeba334d9862a9b4d765f328bc95684879465e/grp_2022.py"
grp_2022 = button2(grp_2022_url)
doc["grp_2022"].bind("click", grp_2022.do)
################################## grp_2022 end
################################## grp2a_2022 start
# for 2a
grp2a_2022_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/2ffeba334d9862a9b4d765f328bc95684879465e/grp2a_2022.py"
grp2a_2022 = button2(grp2a_2022_url)
doc["grp2a_2022"].bind("click", grp2a_2022.do)
################################## grp2a_2022 end
</script>
</p>
<h2>Brython</h2>
<p><a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/0999a227153ea9a20954e4b2b77f783337197627/w4_grp_src.py&amp;src2=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/0999a227153ea9a20954e4b2b77f783337197627/w4_grp_src2.py">2a 分組程式練習</a></p>
<p><a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/507db6ddb7b5bcdd3027235761208b32ac93bcd0/w4_b_grp.py&amp;src2=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/507db6ddb7b5bcdd3027235761208b32ac93bcd0/w4_b_grp_src2.py">2b 分組程式練習</a></p>
<p><a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/a79d474df5500b7487a352903b81989f9a0cd24f/w6_blog.py">2a w6 blog 查驗</a> (<a href="/downloads/w6_blog/2a_stage3.txt">2a 有網誌者</a>) | <a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/07fc8d08e6738f91f7f8042ff48385b4e10436bf/w7_a_summary.py">2a w7 summary 查驗</a> (<a href="/downloads/w7_project/w7_a_summary.txt">2a 有網誌者</a>)</p>
<p><a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/c0e6d1f197434988c56451b2c25f7607c06a15d8/w6_blog_2b.py">2b w6 blog 查驗</a> (<a href="/downloads/w6_blog/2b_stage2.txt">2b 有網誌者</a>) | <a href="https://mde.tw/cd2022_guide/content/Brython?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/faffe2bd308016216ce19de21c38a6e33ea33a1f/w7_b_summary.py">2b w7 summary 查驗</a> (<a href="/downloads/w7_project/w7_b_summary.txt">2b 有網誌者</a>)</p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<!-- Cango 程式庫 -->
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<!-- for Konva 程式庫 -->
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- #####  editor1 開始 ##### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<p><!-- 這裡的畫布 id 為 brython_div --></p>
<div id="brython_div"></div>
<!-- graphics-column is for ggame -->
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- #####  editor1 結束 ##### --></p>
<p><!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw_container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()
    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    Ace.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- 印出程式2--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    # 注意這裡清除的畫布 id 為 brython_div2
    bd2 = doc["brython_div2"]
    bd2.clear()

Ace2 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw_container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src2 變數值
    try:
        url2 = doc.query["src2"]
    except:
        url2 = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog2 = open(url2).read()
    # 將程式載入編輯區
    Ace2.editor.setValue(prog2)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    # 直接執行程式
    Ace2.run()
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace2.run)
doc['kw_show_console2'].bind('click', Ace2.show_console)
doc['kw_clear_console2'].bind('click', Ace2.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<div id="brython_div2"></div>
<p><!--  結束列印程式 2 --></p>
<p><!-- 印出程式3--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd3(ev):
    # 注意這裡清除的畫布 id 為 brython_div3
    bd3 = doc["brython_div3"]
    bd3.clear()

Ace3 = ace.Editor(editor_id="kw_editor3", console_id="kw_console3", container_id="kw_container3", storage_id="kw_py_src3" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run3():
    # 利用 get 取下 src3 變數值
    try:
        url3 = doc.query["src3"]
    except:
        url3 = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog3 = open(url3).read()
    # 將程式載入編輯區
    Ace3.editor.setValue(prog3)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    Ace3.run()
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run3'].bind('click', Ace3.run)
doc['kw_show_console3'].bind('click', Ace3.show_console)
doc['kw_clear_console3'].bind('click', Ace3.clear_console)
doc['clear_bd3'].bind('click', clear_bd3)
# 呼叫函式執行
run3()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor3" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename3" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src3', 'kw_filename3');" type="submit" value="Save"/></form>
<p><button id="kw_run3">Run</button> <button id="kw_show_console3">Output</button> <button id="kw_clear_console3">清除輸出區</button><button id="clear_bd3">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console3"></textarea></div>
<div id="brython_div3"></div>
<p><!--  結束列印程式 3 --></p>