<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>協同產品設計實習 - Programming</title><link href="./" rel="alternate"></link><link href="./feeds/programming.atom.xml" rel="self"></link><id>./</id><updated>2022-04-21T21:29:38+08:00</updated><entry><title>Q and A</title><link href="./w9-Q-and-A.html" rel="alternate"></link><published>2022-04-21T11:00:00+08:00</published><updated>2022-04-21T21:29:38+08:00</updated><author><name>yen</name></author><id>tag:None,2022-04-21:./w9-Q-and-A.html</id><summary type="html">&lt;h2&gt;Windows 環境中還不會使用 SSH push github 版本&lt;/h2&gt;
&lt;p&gt;利用 SSH 協定推送 Github 版本的做法其實很簡單, 共有四個階段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;啟動可攜時設定 GIT_SSH 變數&lt;/li&gt;
&lt;li&gt;將 OpenSSH 格式的公鑰送到 Github&lt;/li&gt;
&lt;li&gt;讓 Putty 可以上網且 Session 連結到近端的私鑰&lt;/li&gt;
&lt;li&gt;確定近端倉儲的 .git/config 檔案中轉為採 SSH 進行連線&lt;/li&gt;
&lt;/ul&gt;
</summary><content type="html">&lt;h2&gt;Windows 環境中還不會使用 SSH push github 版本&lt;/h2&gt;
&lt;p&gt;利用 SSH 協定推送 Github 版本的做法其實很簡單, 共有四個階段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;啟動可攜時設定 GIT_SSH 變數&lt;/li&gt;
&lt;li&gt;將 OpenSSH 格式的公鑰送到 Github&lt;/li&gt;
&lt;li&gt;讓 Putty 可以上網且 Session 連結到近端的私鑰&lt;/li&gt;
&lt;li&gt;確定近端倉儲的 .git/config 檔案中轉為採 SSH 進行連線&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;上述在 Windows 環境中透過 Putty 以 SSH 推送改版資料到 Github 的四個階段, 只有將 Putty 設定的 session 放入電腦 registry 的部分比較容易發生問題, 因為電腦輔助設計室中的電腦帶有防寫卡, 重新開機後 registry 會重置. 因此比較建立透過設定完成的 .reg 在每次提交推送之前, 將 session 設定改為自己的設定. 詳細說明請參考 &lt;a href="https://mde.tw/wcm2022_guide/content/Token%20and%20SSH.html"&gt;https://mde.tw/wcm2022_guide/content/Token%20and%20SSH.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Pelican Blog 的問題&lt;/h2&gt;
&lt;p&gt;pelican markdown -o blog -s local_publishconf.py&lt;/p&gt;
&lt;p&gt;指令的意思為: 利用 Scripts/pelican.exe 程式將 markdown 目錄中的所有 .md 檔案, 以 local_publishconf.py 中的設定轉為網誌 html 檔案, 其 output 輸出目錄設為 blog.&lt;/p&gt;
&lt;p&gt;比較常見的問題是: 每一個 .md 檔案中的前面標題部分格式要求非常嚴謹, 因為 Pelican 必須根據各變數的內容, 將此 .md 檔案轉為 blog 目錄中的網誌超文件.&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
---
Title: Q and A
Date: 2022-04-21 11:00
Category: Programming
Tags: 2022SpringCD
Slug: w9-Q-and-A
Author: yen
---
&lt;/pre&gt;

&lt;p&gt;上面第一行中的 @language md 是 Leo Editor 的內文指令, 表示要以 Markdown 的語法來解析以下的檔案內容.&lt;/p&gt;
&lt;p&gt;Title: 後的字串會成為網誌文章的標題.&lt;/p&gt;
&lt;p&gt;Date: 標示文章編寫十的日期與時間, 而格式必須按照年月日再加上編寫時間的設定進行標記.&lt;/p&gt;
&lt;p&gt;Category: 中的字串表示文章類別, 當使用者在特定類別中有多篇文章時, 只要點選特定 Category, 就會列出此一類別的網誌文章.&lt;/p&gt;
&lt;p&gt;Tags: 中的字串為用來分類網誌文章的第二層註記.&lt;/p&gt;
&lt;p&gt;Slug: 中的字串為此篇文章轉進  blog 目錄之後所使用的檔案名稱, 也因為如此, 每一篇網誌都必須有獨一的 Slug 字串.&lt;/p&gt;
&lt;p&gt;Authon: 則用來標示此篇文章的作者.&lt;/p&gt;
&lt;h2&gt;不同 CAD 與版本繪製零組件的協同&lt;/h2&gt;
&lt;p&gt;Solvespace 是開源的參數式 CAD, 所建立的零組件檔案只能轉進 CoppeliaSim.&lt;/p&gt;
&lt;p&gt;NX 是高階的參數式 CAD/CAM/CAE 套件, 目前使用的 NX 共有 NX12, NX1980 與 NX2008, 利用舊版 NX 建立的零件檔案, 可以用新版打開, 但若該檔案由新版 NX 編輯後, 就無法讓舊版的 NX 開啟, 因此在協同產品設計時, 若組員中分別使用不同版本的 NX 建立零組件, 則參數 CAD 的協同流程只能單向進行, 但無論採用哪一版的 NX 建立零件檔案轉為 STL 後, 都可以進入 Coppeliasim 建立模擬場景.&lt;/p&gt;
&lt;p&gt;而 Onshape 則是全雲端的參數式 CAD, 在沒有後端 API 權限的情況下只能利用 Featurescript 協助建立參數式驅動的 uarm 機械手臂零件.&lt;/p&gt;
&lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://https-mde-tw-eng.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="https://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><category term="Programming"></category><category term="2022SpringCD"></category></entry><entry><title>w8 debug 40923136 倉儲</title><link href="./w8-debug-40923136-cmsimde-repo.html" rel="alternate"></link><published>2022-04-13T11:00:00+08:00</published><updated>2022-04-13T20:13:55+08:00</updated><author><name>yen</name></author><id>tag:None,2022-04-13:./w8-debug-40923136-cmsimde-repo.html</id><summary type="html">&lt;p&gt;今天上課碰到一個看似詭異的問題: 將目前 &lt;a href="https://github.com/40923136-1/cd2022/tree/ae71aee67b73123f2f62a896174a3c130c0fb85c"&gt;40923136 cd2022 倉儲&lt;/a&gt; clone 到近端後, 只要進入倉儲執行 cms.bat 就會同時開啟 Leo Editor, 而且 Leo Editor 是隨著 cmsimde/wsgi.py 啟動, 意即, Leo Editor 在 Flask 網際程式的架構下啟動, 因此一旦手動關閉 Leo Editor, Flask 會自動重新開啟 Leo Editor.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;今天上課碰到一個看似詭異的問題: 將目前 &lt;a href="https://github.com/40923136-1/cd2022/tree/ae71aee67b73123f2f62a896174a3c130c0fb85c"&gt;40923136 cd2022 倉儲&lt;/a&gt; clone 到近端後, 只要進入倉儲執行 cms.bat 就會同時開啟 Leo Editor, 而且 Leo Editor 是隨著 cmsimde/wsgi.py 啟動, 意即, Leo Editor 在 Flask 網際程式的架構下啟動, 因此一旦手動關閉 Leo Editor, Flask 會自動重新開啟 Leo Editor.&lt;/p&gt;


&lt;h2&gt;cmsimde&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde"&gt;cmsimde&lt;/a&gt; 是在 2013 年11 月啟動開發, 至 2014 年 1 月 21 日可運作初版釋出之後, 密集開發時程大約只到 2017 年, 之後就沿用至今, 當時所設計的基本架構已經幾年沒有更新, 許多細節若沒有仔細閱讀當年的開發日誌, 其實都已經忘了.&lt;/p&gt;
&lt;p&gt;今天在上課時段, 同學提問: 只要將 &lt;a href="https://github.com/40923136-1/cd2022/tree/ae71aee67b73123f2f62a896174a3c130c0fb85c"&gt;40923136 cd2022 倉儲&lt;/a&gt; clone 到近端, 然後在命令列中進入倉儲執行 cms.bat, 除了開啟動態系統外, 竟然同時開啟 Leo Editor, 而且詭異的是, 手動關閉 Leo Editor, 系統會重新開啟 Leo Editor. &lt;/p&gt;
&lt;h2&gt;啟動 debug 流程&lt;/h2&gt;
&lt;p&gt;光是從最後一點, 當下就知道 Leo Editor 是經由 Flask 開啟, 於是第一時間就判斷應該是 cmsimde 中的程式碼被塞入與 Leo Editor 啟動有關的啟動資料.&lt;/p&gt;
&lt;p&gt;但是經由 &lt;a href="https://winmerge.org"&gt;WinMerge&lt;/a&gt; 的目錄比對, 除了提供比對用的 cmsimde 目錄中, 多了 Mac 操作系統使用過程殘存未刪除的檔案外, 其餘的程式檔案都完全相同.&lt;/p&gt;
&lt;p&gt;既然如此, 問題就不是出在 cmsimde 目錄, 儘管 &lt;a href="https://github.com/40923136-1/cd2022/tree/ae71aee67b73123f2f62a896174a3c130c0fb85c"&gt;40923136 cd2022 倉儲&lt;/a&gt;中的 cmsimde 並非使用子模組設定, 但這並不影響使用功能, 因此接下的 debug 目標, 就應該是倉儲中其他檔案, 而且一定是與 cmsimde 中的 Flask 程式有關的資料檔案.&lt;/p&gt;
&lt;p&gt;記憶中與 wsgi.py 及 flaskapp.py 有關的啟動檔案只有 init.py, 因此比對 &lt;a href="https://github.com/40923136-1/cd2022/tree/ae71aee67b73123f2f62a896174a3c130c0fb85c"&gt;40923136 cd2022 倉儲&lt;/a&gt; 倉儲中的 init.py 以及 cms.bat 都沒有異狀.&lt;/p&gt;
&lt;p&gt;最後在 &lt;a href="https://github.com/40923136-1/cd2022/tree/ae71aee67b73123f2f62a896174a3c130c0fb85c"&gt;40923136 cd2022 倉儲&lt;/a&gt;還需要比對的 .py 檔案, 就只剩下 Pelican 相關的  .py 設定檔案, 以及一個 user.py.&lt;/p&gt;
&lt;p&gt;因為完全不記得為何使用者的倉儲中為何會有這個 user.py,  但還是以 SciTE 開啟後拉動檢查, 最後終於在&lt;a href="https://github.com/40923136-1/cd2022/blob/ae71aee67b73123f2f62a896174a3c130c0fb85c/user.py#L180"&gt;第 180 行&lt;/a&gt; 找到造成詭異反應的 Leo Editor 啟動程式.&lt;/p&gt;
&lt;p&gt;這時才想起來 &lt;a href="https://github.com/40923136-1/cd2022/blob/ae71aee67b73123f2f62a896174a3c130c0fb85c/cmsimde/flaskapp.py#L52"&gt;flaskapp.py 第 52 行&lt;/a&gt; 設置了使用者延伸機制, user.py 是讓使用者用來延伸 cmsimde 的範例程式段, 讓需要延伸 cmsimde 的用戶可以自行加入所需要的額外功能程式碼.&lt;/p&gt;
&lt;p&gt;好了, 透過 Flask 啟動 Leo Editor 的元兇找到了, 只要將 &lt;a href="https://github.com/40923136-1/cd2022/tree/ae71aee67b73123f2f62a896174a3c130c0fb85c"&gt;40923136 cd2022 倉儲&lt;/a&gt;中的這段啟動 Leo Editor 的程式碼刪除, 應該就可以了.&lt;/p&gt;</content><category term="Programming"></category><category term="2022SpringCD"></category></entry><entry><title>w7 程式專案</title><link href="./2022-Spring-CD-w7-programming-project.html" rel="alternate"></link><published>2022-04-07T11:00:00+08:00</published><updated>2022-04-13T20:13:55+08:00</updated><author><name>yen</name></author><id>tag:None,2022-04-07:./2022-Spring-CD-w7-programming-project.html</id><summary type="html">&lt;p&gt;協同產品設計實習第七週執行機械手臂的物件取放實習&lt;/p&gt;
</summary><content type="html">&lt;p&gt;協同產品設計實習第七週執行機械手臂的物件取放實習&lt;/p&gt;


&lt;!-- css and js for Wink3 --&gt;
&lt;p&gt;&lt;link rel="stylesheet" type="text/css" href="./../cmsimde/static/winkPlayer.css" /&gt;&lt;/p&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/winkPlayer.js"&gt;&lt;/script&gt;

&lt;h2&gt;cd 協同分組&lt;/h2&gt;
&lt;p&gt;2a 名單: &lt;a href="https://mde.tw/studlist/2022spring/2a.txt"&gt;https://mde.tw/studlist/2022spring/2a.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2b 名單: &lt;a href="https://mde.tw/studlist/2022spring/2b.txt"&gt;https://mde.tw/studlist/2022spring/2b.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/0999a227153ea9a20954e4b2b77f783337197627/w4_grp_src.py&amp;amp;src2=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/0999a227153ea9a20954e4b2b77f783337197627/w4_grp_src2.py"&gt;2a 分組&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde.tw/cd2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/507db6ddb7b5bcdd3027235761208b32ac93bcd0/w4_b_grp.py&amp;amp;src2=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/507db6ddb7b5bcdd3027235761208b32ac93bcd0/w4_b_grp_src2.py"&gt;2b 分組&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cad.onshape.com/documents/3c81d3f7fc38f5da16eef9ed/w/f6d4616f188bc9425608890c/e/08936ec436f9e9668efeaefd?renderMode=0&amp;amp;uiState=6254c8ae6d93450dec4bb2b2"&gt;Onshape 中的 uArm 組立圖&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://localhost:9445/downloads/cd2022_uarm_nx12_imported.7z"&gt;cd2022_uarm_nx12_imported.7z&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=GUaa97tALxE&amp;amp;list=PLzEsJue49U_EMMv0eBo8MNJjJOq_WHCrl"&gt;分配 NX 教學影片&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下影片說明如何利用 Leo Editor 編輯 config/pelican.leo 網誌檔案:&lt;/p&gt;
&lt;script&gt;
var winkVideoData_pelican = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&lt;/script&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData_pelican" height="630" muted="true" width="1008"&gt;
&lt;source src="./../downloads/w6_blog/w6_blog.mp4" type="video/mp4"/&gt;&lt;/video&gt;
&lt;div class="winkVideoOverlayClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarClass"&gt;&lt;button class="winkVideoControlBarPlayButtonClass"&gt;&lt;/button&gt; &lt;button class="winkVideoControlBarPauseButtonClass"&gt;&lt;/button&gt;
&lt;div class="winkVideoControlBarProgressLeftClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressEmptyMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressRightClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressFilledMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressThumbClass"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="winkVideoPlayOverlayClass"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;以下為第三週的課程教學影片:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/roJ3Bk44qO4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;uarm 機械手臂&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.ufactory.cc/pages/uarm"&gt;uarm&lt;/a&gt; 是一組四個自由度的桌上型機械手臂, &lt;a href="https://github.com/uArm-Developer"&gt;uarm developer&lt;/a&gt; 倉儲提供許多與 &lt;a href="https://www.ufactory.cc/pages/uarm"&gt;uarm&lt;/a&gt; 相關的設計與應用資料.&lt;/p&gt;
&lt;p&gt;從 &lt;a href="https://cdn.shopifycdn.net/s/files/1/0012/6979/2886/files/uArmSwiftPro_UP1300_3D.STEP?v=1601200945"&gt;UFACTORY uArm Swift Pro 3D Models&lt;/a&gt; 可以下載 &lt;a href="https://www.ufactory.cc/pages/uarm"&gt;uarm&lt;/a&gt; 的 STEP 203 格式的檔案, 從而得知 &lt;a href="https://www.ufactory.cc/pages/uarm"&gt;uarm&lt;/a&gt; 是採用 SolidWorks 2014 設計繪製, 但其中的零件檔案以簡體中文命名, 採 &lt;a href="https://en.wikipedia.org/wiki/GB_2312"&gt;GB2312&lt;/a&gt; 編碼, 在 Windows code page 代號為 &lt;a href="https://en.wikipedia.org/wiki/Code_page_936_(Microsoft_Windows)"&gt;936&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;希望讀取 &lt;a href="https://cdn.shopifycdn.net/s/files/1/0012/6979/2886/files/uArmSwiftPro_UP1300_3D.STEP?v=1601200945"&gt;UFACTORY uArm Swift Pro 3D Models&lt;/a&gt; 中正確的簡體中文資料, 可以將 SciTE 中的 SciTEGlobal.properties code.page 設定從 &lt;a href="https://zh.wikipedia.org/wiki/Unicode"&gt;65001&lt;/a&gt; (UTF-8) 改為 &lt;a href="https://en.wikipedia.org/wiki/Code_page_936_(Microsoft_Windows)"&gt;936&lt;/a&gt;, 再將正確顯示的 &lt;a href="https://en.wikipedia.org/wiki/GB_2312"&gt;GB2312&lt;/a&gt; 編碼資料轉為 UTF-8 內容, 就可在 import 進入 Onshape 與 NX12 後, 的到正確的 &lt;a href="https://cad.onshape.com/documents/3c81d3f7fc38f5da16eef9ed/w/f6d4616f188bc9425608890c/e/08936ec436f9e9668efeaefd?renderMode=0&amp;amp;uiState=6254c8ae6d93450dec4bb2b2"&gt;Onshape 中的 uArm 組立圖&lt;/a&gt; 以及 &lt;a href="https://localhost:9445/downloads/cd2022_uarm_nx12_imported.7z"&gt;cd2022_uarm_nx12_imported.7z&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;如何建立可攜 NX1980 系統&lt;/h2&gt;
&lt;p&gt;製作 Portable NX1980 的步驟請參考以下影片:&lt;/p&gt;
&lt;script&gt;
var winkVideoData_nx1980 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&lt;/script&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData_nx1980" height="630" muted="true" width="1008"&gt;
&lt;source src="./../downloads/w5_portable_nx1980/w5_portable_nx1980.mp4" type="video/mp4"/&gt;&lt;/video&gt;
&lt;div class="winkVideoOverlayClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarClass"&gt;&lt;button class="winkVideoControlBarPlayButtonClass"&gt;&lt;/button&gt; &lt;button class="winkVideoControlBarPauseButtonClass"&gt;&lt;/button&gt;
&lt;div class="winkVideoControlBarProgressLeftClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressEmptyMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressRightClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressFilledMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressThumbClass"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="winkVideoPlayOverlayClass"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;NX1980 setup&lt;/h2&gt;
&lt;p&gt;以下影片說明如何設定 Journal 存檔格式, 關閉 Product Execellence Program, 並查驗版本與授權使用單位:&lt;/p&gt;
&lt;script&gt;
var winkVideoData_nx1980_setup = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&lt;/script&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData_nx1980_setup" height="630" muted="true" width="1008"&gt;
&lt;source src="./../downloads/w5_nx_api/w5_nx_api.mp4" type="video/mp4"/&gt;&lt;/video&gt;
&lt;div class="winkVideoOverlayClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarClass"&gt;&lt;button class="winkVideoControlBarPlayButtonClass"&gt;&lt;/button&gt; &lt;button class="winkVideoControlBarPauseButtonClass"&gt;&lt;/button&gt;
&lt;div class="winkVideoControlBarProgressLeftClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressEmptyMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressRightClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressFilledMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressThumbClass"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="winkVideoPlayOverlayClass"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;Three.js&lt;/h2&gt;
&lt;p&gt;&lt;iframe frameborder="0" height="300" src="./../downloads/threejs_ex/index.html" width="300"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder="0" height="300" src="./../downloads/threejs_ex/ex1/asm.html" width="300"&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2&gt;scarysim 專案&lt;/h2&gt;
&lt;p&gt;位於 &lt;a href="https://github.com/mdecourse/scarysim"&gt;https://github.com/mdecourse/scarysim&lt;/a&gt;, 採用  Qt5 與 OpenGL 編寫, 可以使用 qmake 進行編譯與連結.&lt;/p&gt;
&lt;!-- 導入 winkVideoData 變數值 --&gt;
&lt;script&gt;
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&lt;/script&gt;
&lt;!-- 將 mp4 檔案從 downloads 目錄取出播放 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData" height="630" muted="true" width="1008"&gt;
&lt;source src="./../downloads/w7_pap/w7_pap.mp4" type="video/mp4"/&gt;&lt;/video&gt;
&lt;div class="winkVideoOverlayClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarClass"&gt;&lt;button class="winkVideoControlBarPlayButtonClass"&gt;&lt;/button&gt; &lt;button class="winkVideoControlBarPauseButtonClass"&gt;&lt;/button&gt;
&lt;div class="winkVideoControlBarProgressLeftClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressEmptyMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressRightClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressFilledMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressThumbClass"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="winkVideoPlayOverlayClass"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;以上的 Wink 影片播放設定超文件:&lt;/p&gt;
&lt;pre class="brush: html"&gt;
&lt;!-- css and js for Wink3 --&gt;
&lt;link rel="stylesheet" type="text/css" href="./../cmsimde/static/winkPlayer.css" /&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/winkPlayer.js"&gt;&lt;/script&gt;
&lt;!-- 導入 winkVideoData 變數值 --&gt;
&lt;script&gt;
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
&lt;/script&gt;
&lt;!-- 將 mp4 檔案從 downloads 目錄取出播放 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="./../cmsimde/static" data-varname="winkVideoData" height="630" muted="true" width="1008"&gt;
&lt;source src="./../downloads/w7_pap/w7_pap.mp4" type="video/mp4"/&gt;&lt;/video&gt;
&lt;div class="winkVideoOverlayClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarClass"&gt;&lt;button class="winkVideoControlBarPlayButtonClass"&gt;&lt;/button&gt; &lt;button class="winkVideoControlBarPauseButtonClass"&gt;&lt;/button&gt;
&lt;div class="winkVideoControlBarProgressLeftClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressEmptyMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressRightClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressFilledMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressThumbClass"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="winkVideoPlayOverlayClass"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/pre&gt;
&lt;h2&gt;simExtMtb 專案&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://gmnfuedutw-my.sharepoint.com/:u:/g/personal/yen_gm_nfu_edu_tw/EccOQ_vbC2FAqk59lpm3sMIB8L7T9hc1wKbT3dkz5Aa9MA?e=dLP7ql"&gt;CoppeliaSim 4.1.0 原始碼編譯專案&lt;/a&gt; (登入 @gm OneDrive 後下載).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wcm.cycu.org:88/github/copsim410"&gt;CoppeliaSim 從 4.1.0 的 help files&lt;/a&gt; (只能在系上以 IPv6 網路連線).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wcm.cycu.org:88/github/cad2021/content/Task7-1-1.html"&gt;CoppeliaSim 編譯說明 1&lt;/a&gt;  (只能在系上以 IPv6 網路連線).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wcm.cycu.org:88/github/cad2021/content/Compile%20CoppeliaSim.html"&gt;CoppeliaSim 編譯&lt;/a&gt; (只能在系上以 IPv6 網路連線).&lt;/p&gt;</content><category term="Programming"></category><category term="2022SpringCD"></category></entry></feed>