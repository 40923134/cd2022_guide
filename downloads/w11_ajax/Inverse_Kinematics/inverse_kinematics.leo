<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="leo.20210522214552.1"><vh>@settings</vh>
<v t="leo.20210522214552.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="leo.20210522214552.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="leo.20210527210354.1"><vh>About</vh></v>
<v t="leo.20210522214903.1"><vh>recursive importer</vh></v>
<v t="leo.20210527223312.1"><vh>imported files</vh>
<v t="leo.20210527223312.2"><vh>@path ./</vh>
<v t="leo.20210527223312.3"><vh>@@path Tutorial1</vh>
<v t="leo.20210527223312.4"><vh>@clean conveyorBelt_childScript.lua</vh>
<v t="leo.20210527223312.5"><vh>sysCall_init (conveyorBelt_childScript.lua)</vh></v>
<v t="leo.20210527223312.6"><vh>sysCall_cleanup (conveyorBelt_childScript.lua)</vh></v>
<v t="leo.20210527223312.7"><vh>sysCall_actuation (conveyorBelt_childScript.lua)</vh></v>
<v t="leo.20210527223312.8"><vh>sysCall_sensing (conveyorBelt_childScript.lua)</vh></v>
<v t="leo.20210527223312.9"><vh>insertBox (conveyorBelt_childScript.lua)</vh></v>
</v>
<v t="leo.20210527223312.10"><vh>@clean conveyorBelt_childScript_commented.lua</vh>
<v t="leo.20210527223312.11"><vh>sysCall_init (conveyorBelt_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.12"><vh>sysCall_cleanup (conveyorBelt_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.13"><vh>sysCall_actuation (conveyorBelt_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.14"><vh>sysCall_sensing (conveyorBelt_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.15"><vh>insertBox (conveyorBelt_childScript_commented.lua)</vh></v>
</v>
<v t="leo.20210527223312.16"><vh>@clean customizableConveyor_childScript.lua</vh>
<v t="leo.20210527223312.17"><vh>sysCall_init (customizableConveyor_childScript.lua)</vh></v>
<v t="leo.20210527223312.18"><vh>sysCall_cleanup (customizableConveyor_childScript.lua)</vh></v>
<v t="leo.20210527223312.19"><vh>sysCall_actuation (customizableConveyor_childScript.lua)</vh></v>
<v t="leo.20210527223312.20"><vh>sysCall_sensing (customizableConveyor_childScript.lua)</vh></v>
<v t="leo.20210527223312.21"><vh>addObject (customizableConveyor_childScript.lua)</vh></v>
<v t="leo.20210527223312.22"><vh>removeObject (customizableConveyor_childScript.lua)</vh></v>
</v>
<v t="leo.20210527223312.23"><vh>@clean customizableConveyor_childScript_commented.lua</vh>
<v t="leo.20210527223312.24"><vh>sysCall_init (customizableConveyor_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.25"><vh>sysCall_cleanup (customizableConveyor_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.26"><vh>sysCall_actuation (customizableConveyor_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.27"><vh>sysCall_sensing (customizableConveyor_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.28"><vh>addObject (customizableConveyor_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.29"><vh>removeObject (customizableConveyor_childScript_commented.lua)</vh></v>
</v>
</v>
<v t="leo.20210527223312.30"><vh>@@path Tutorial2</vh>
<v t="leo.20210527223312.31"><vh>@clean conveyorBelt_childScript.lua</vh>
<v t="leo.20210527223312.32"><vh>sysCall_init (conveyorBelt_childScript.lua)</vh></v>
<v t="leo.20210527223312.33"><vh>sysCall_cleanup (conveyorBelt_childScript.lua)</vh></v>
<v t="leo.20210527223312.34"><vh>sysCall_actuation (conveyorBelt_childScript.lua)</vh></v>
<v t="leo.20210527223312.35"><vh>sysCall_sensing (conveyorBelt_childScript.lua)</vh></v>
<v t="leo.20210527223312.36"><vh>removeFirstObject (conveyorBelt_childScript.lua)</vh></v>
<v t="leo.20210527223312.37"><vh>insertBox (conveyorBelt_childScript.lua)</vh></v>
<v t="leo.20210527223312.38"><vh>createPath (conveyorBelt_childScript.lua)</vh></v>
<v t="leo.20210527223312.39"><vh>updatePickupPath (conveyorBelt_childScript.lua)</vh></v>
</v>
<v t="leo.20210527223312.40"><vh>@clean conveyorBelt_childScript_commented.lua</vh>
<v t="leo.20210527223312.41"><vh>sysCall_init (conveyorBelt_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.42"><vh>sysCall_cleanup (conveyorBelt_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.43"><vh>sysCall_actuation (conveyorBelt_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.44"><vh>sysCall_sensing (conveyorBelt_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.45"><vh>removeFirstObject (conveyorBelt_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.46"><vh>insertBox (conveyorBelt_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.47"><vh>createPath (conveyorBelt_childScript_commented.lua)</vh></v>
<v t="leo.20210527223312.48"><vh>updatePickupPath (conveyorBelt_childScript_commented.lua)</vh></v>
</v>
<v t="leo.20210527223312.49"><vh>@clean customizable_belt.lua</vh>
<v t="leo.20210527223312.50"><vh>sysCall_init (customizable_belt.lua)</vh></v>
<v t="leo.20210527223312.51"><vh>sysCall_cleanup (customizable_belt.lua)</vh></v>
<v t="leo.20210527223312.52"><vh>sysCall_actuation (customizable_belt.lua)</vh></v>
<v t="leo.20210527223312.53"><vh>sysCall_sensing (customizable_belt.lua)</vh></v>
<v t="leo.20210527223312.54"><vh>addObject (customizable_belt.lua)</vh></v>
<v t="leo.20210527223312.55"><vh>removeObject (customizable_belt.lua)</vh></v>
</v>
<v t="leo.20210527223312.56"><vh>@clean LBR_iiwa_14_R820_threaded_childScrpit.lua</vh>
<v t="leo.20210527223312.57"><vh>sysCall_threadmain (LBR_iiwa_14_R820_threaded_childScrpit.lua)</vh></v>
</v>
<v t="leo.20210527223312.58"><vh>@clean LBR_iiwa_14_R820_threaded_childScrpit_commented.lua</vh>
<v t="leo.20210527223312.59"><vh>sysCall_threadmain (LBR_iiwa_14_R820_threaded_childScrpit_commented.lua)</vh></v>
</v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="leo.20210522214552.1"></t>
<t tx="leo.20210522214552.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="leo.20210522214552.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="leo.20210522214903.1">'''Recursively import all python files in a directory and clean the result.'''
# ctrl + b to execute

c.recursiveImport(
    dir_ = r'./',
    kind = '@clean', # The new best practice.
    safe_at_file = False,
    theTypes = ['.lua'] 
)</t>
<t tx="leo.20210527210354.1">https://www.youtube.com/watch?v=JUiSZinyH1c

https://www.youtube.com/watch?v=Sf8E16EK6BQ

vrep.simxSetIntegerSignal
 
 simxInt simxSetIntegerSignal(simxInt clientID,const simxChar* signalName,simxInt signalValue,simxInt operationMode)

Sets the value of an integer signal. If that signal is not yet present, it is added.</t>
<t tx="leo.20210527223312.1"></t>
<t tx="leo.20210527223312.10">@path ./Tutorial1/
@others
@language lua
@tabwidth -4
</t>
<t tx="leo.20210527223312.11">function sysCall_init() 
    -- User Parameters
--    beltSpeed = 0.4
--    T_insert = 1
--    insertCoordinate = {-1.3,-0.5,0.25}
--    goodPercentage = 0.19
--    goodColor = {0.345,0.859,0.192}   
    -- Initialize auxiliary variables
--    T_last_inserted = 0
--    deltaTime = 0
--    hasStopped = false
--    boxList = {}
--    boxDummyList = {}
--    boolList = {}
    -- Initialize handles, set beltSpeed
--    box = sim.getObjectHandle("Box")
--    boxDummy = sim.getObjectHandle("BoxDummy")
    forwarder=sim.getObjectHandle('ConveyorBelt_forwarder')    
--    proximity = sim.getObjectHandle("Proximity_sensor_belt1")
--    belt2script = sim.getScriptHandle("customizableConveyor")
--    sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
    -- Insert the first box during initializiation
--    insertBox()
end
</t>
<t tx="leo.20210527223312.12">function sysCall_cleanup() 
end 
</t>
<t tx="leo.20210527223312.13">function sysCall_actuation() 
--- THIS IS NOT PART OF THE TUTORIAL. IT COMES ALREADY WITH THE CONVEYOR BELT!
--- DO NOT MODIFY THIS FUNCTION!
    beltVelocity=sim.getScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity")
    -- Here we "fake" the transportation pads with a single static rectangle that we dynamically reset
    -- at each simulation pass (while not forgetting to set its initial velocity vector) :
    relativeLinearVelocity={beltVelocity,0,0}
    -- Reset the dynamic rectangle from the simulation (it will be removed and added again)
    sim.resetDynamicObject(forwarder)
    -- Compute the absolute velocity vector:
    m=sim.getObjectMatrix(forwarder,-1)
    m[4]=0 -- Make sure the translation component is discarded
    m[8]=0 -- Make sure the translation component is discarded
    m[12]=0 -- Make sure the translation component is discarded
    absoluteLinearVelocity=sim.multiplyVector(m,relativeLinearVelocity)
    -- Now set the initial velocity of the dynamic rectangle:
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_x,absoluteLinearVelocity[1])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_y,absoluteLinearVelocity[2])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_z,absoluteLinearVelocity[3])
end 
</t>
<t tx="leo.20210527223312.14">function sysCall_sensing() 
    -- Read Proximity sensor (0= nothing detected, 1 = object detected)
--    local res = sim.readProximitySensor(proximity)
    -- Check if possible to insert an new box
--    if (sim.getSimulationTime()-T_last_inserted &gt; T_insert) and not hasStopped then
--        insertBox()
--    end
    -- If proximity sensor detects an object, stop the belt, stop inserting objects
--    if res == 1 and not hasStopped then
--        if boolList[1] then
--            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)
--            deltaTime = sim.getSimulationTime()-T_last_inserted
--            hasStopped = true
--        else
--            local box = table.remove(boxList,1)
--            local boxDummy = table.remove(boxDummyList,1)
--            table.remove(boolList,1)
--            sim.removeObject(box)
--            sim.removeObject(boxDummy)
--        end
--    end
    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting
--    if res == 0 and hasStopped then
--        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
--        hasStopped = false
--        T_last_inserted = sim.getSimulationTime()-deltaTime
--    end
end
</t>
<t tx="leo.20210527223312.15">function insertBox()
    -- Generate random numbers
--    local rand1 = math.random()
--    local rand2 = math.random()
--    local rand3 = math.random()
    -- Generate random disturbances on position and orientation
--    local dx = (2*rand1-1)*0.1
--    local dy = (2*rand2-1)*0.1
--    local dphi = (2*rand3-1)*0.5
--    local disturbedCoordinates = {0,0,0}
--    disturbedCoordinates[1] = insertCoordinate[1]+dx
--    disturbedCoordinates[2] = insertCoordinate[2]+dy
--    disturbedCoordinates[3] = insertCoordinate[3]
    -- Copy and paste box and boxDummy
--    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)
    -- Update last inserted box time
--    T_last_inserted = sim.getSimulationTime()
    -- Move and rotate
--    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)
--    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})
    -- Store handles to boxes and dummies
--    table.insert(boxList,insertedObjects[1])
--    table.insert(boxDummyList,insertedObjects[2]) 
    -- Decide if object is good or bad
--    local decision = math.random() 
--    if decision &lt;= goodPercentage then
    -- Object is good, assign goodColor
--        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)
--        table.insert(boolList,true)
--    else
    -- Object is bad, assign random color
--        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})
--        table.insert(boolList,false)
--    end
end
</t>
<t tx="leo.20210527223312.16">@path ./Tutorial1/
@others
@language lua
@tabwidth -4
</t>
<t tx="leo.20210527223312.17">function sysCall_init() 
    -- Parameters
    beltSpeed = 0.1
    -- Initialize auxiliary variables
    boxList = {}
    boxDummyList = {}
    -- Get object and script handles
    forwarder=sim.getObjectHandle('customizableConveyor_forwarder')
    textureShape=sim.getObjectHandle('customizableConveyor_tableTop')
    proximity1 = sim.getObjectHandle("Proximity_sensor_belt2_1")
    proximity2 = sim.getObjectHandle("Proximity_sensor_belt2_2")
    belt1_script = sim.getScriptHandle("ConveyorBelt")
    -- Set belt2 speed
    sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
end
</t>
<t tx="leo.20210527223312.18">function sysCall_cleanup() 
end 
</t>
<t tx="leo.20210527223312.19">function sysCall_actuation() 
--- THIS IS NOT PART OF THE TUTORIAL. IT COMES ALREADY WITH THE CONVEYOR BELT!
--- DO NOT MODIFY THIS FUNCTION!
    beltVelocity=sim.getScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity")
    -- We move the texture attached to the conveyor belt to give the impression of movement:
    t=sim.getSimulationTime()
    sim.setObjectFloatParameter(textureShape,sim.shapefloatparam_texture_x,t*beltVelocity)
    -- Here we "fake" the transportation pads with a single static rectangle that we dynamically reset
    -- at each simulation pass (while not forgetting to set its initial velocity vector) :
    relativeLinearVelocity={beltVelocity,0,0}
    -- Reset the dynamic rectangle from the simulation (it will be removed and added again)
    sim.resetDynamicObject(forwarder)
    -- Compute the absolute velocity vector:
    m=sim.getObjectMatrix(forwarder,-1)
    m[4]=0 -- Make sure the translation component is discarded
    m[8]=0 -- Make sure the translation component is discarded
    m[12]=0 -- Make sure the translation component is discarded
    absoluteLinearVelocity=sim.multiplyVector(m,relativeLinearVelocity)
    -- Now set the initial velocity of the dynamic rectangle:
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_x,absoluteLinearVelocity[1])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_y,absoluteLinearVelocity[2])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_z,absoluteLinearVelocity[3])
end 
</t>
<t tx="leo.20210527223312.2"></t>
<t tx="leo.20210527223312.20">function sysCall_sensing()
    -- Read proximity sensors (0 = no detection, 1 = detected object)
    local prox1 = sim.readProximitySensor(proximity1)
    local prox2 = sim.readProximitySensor(proximity2)
    -- Start belt if object detectet by prox1, stop belt if no objet at prox2
    if prox1==1 then
        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
    else
        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)
    end
    -- Remove object if detected by prox2
    if prox2 == 1 then
        removeObject()
    end
end
</t>
<t tx="leo.20210527223312.21">function addObject(obj)
    -- Insert box and boxDummy handle at the end of tables
    table.insert(boxList,obj[1])
    table.insert(boxDummyList,obj[2])
end
</t>
<t tx="leo.20210527223312.22">function removeObject()
    -- Remove first objects from tables, then remove objects from scene
    sim.removeObject(table.remove(boxList,1))
    sim.removeObject(table.remove(boxDummyList,1))
end
</t>
<t tx="leo.20210527223312.23">@path ./Tutorial1/
@others
@language lua
@tabwidth -4
</t>
<t tx="leo.20210527223312.24">function sysCall_init() 
    -- Parameters
--    beltSpeed = 0.1
    -- Initialize auxiliary variables
--    boxList = {}
--    boxDummyList = {}
    -- Get object and script handles
    forwarder=sim.getObjectHandle('customizableConveyor_forwarder')
    textureShape=sim.getObjectHandle('customizableConveyor_tableTop')
--    proximity1 = sim.getObjectHandle("Proximity_sensor_belt2_1")
--    proximity2 = sim.getObjectHandle("Proximity_sensor_belt2_2")
--    belt1_script = sim.getScriptHandle("ConveyorBelt")
    -- Set belt2 speed
--    sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
end
</t>
<t tx="leo.20210527223312.25">function sysCall_cleanup() 
end 
</t>
<t tx="leo.20210527223312.26">function sysCall_actuation() 
--- THIS IS NOT PART OF THE TUTORIAL. IT COMES ALREADY WITH THE CONVEYOR BELT!
--- DO NOT MODIFY THIS FUNCTION!
    beltVelocity=sim.getScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity")
    -- We move the texture attached to the conveyor belt to give the impression of movement:
    t=sim.getSimulationTime()
    sim.setObjectFloatParameter(textureShape,sim.shapefloatparam_texture_x,t*beltVelocity)
    -- Here we "fake" the transportation pads with a single static rectangle that we dynamically reset
    -- at each simulation pass (while not forgetting to set its initial velocity vector) :
    relativeLinearVelocity={beltVelocity,0,0}
    -- Reset the dynamic rectangle from the simulation (it will be removed and added again)
    sim.resetDynamicObject(forwarder)
    -- Compute the absolute velocity vector:
    m=sim.getObjectMatrix(forwarder,-1)
    m[4]=0 -- Make sure the translation component is discarded
    m[8]=0 -- Make sure the translation component is discarded
    m[12]=0 -- Make sure the translation component is discarded
    absoluteLinearVelocity=sim.multiplyVector(m,relativeLinearVelocity)
    -- Now set the initial velocity of the dynamic rectangle:
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_x,absoluteLinearVelocity[1])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_y,absoluteLinearVelocity[2])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_z,absoluteLinearVelocity[3])
end 
</t>
<t tx="leo.20210527223312.27">function sysCall_sensing()
    -- Read proximity sensors (0 = no detection, 1 = detected object)
--    local prox1 = sim.readProximitySensor(proximity1)
--    local prox2 = sim.readProximitySensor(proximity2)
    -- Start belt if object detectet by prox1, stop belt if no objet at prox2
--    if prox1==1 then
--        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
--    else
--        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)
--    end
    -- Remove object if detected by prox2
--    if prox2 == 1 then
--        removeObject()
--    end
end
</t>
<t tx="leo.20210527223312.28">function addObject(obj)
    -- Insert box and boxDummy handle at the end of tables
--    table.insert(boxList,obj[1])
--    table.insert(boxDummyList,obj[2])
end
</t>
<t tx="leo.20210527223312.29">function removeObject()
    -- Remove first objects from tables, then remove objects from scene
--    sim.removeObject(table.remove(boxList,1))
--    sim.removeObject(table.remove(boxDummyList,1))
end
</t>
<t tx="leo.20210527223312.3"></t>
<t tx="leo.20210527223312.30"></t>
<t tx="leo.20210527223312.31">@path ./Tutorial2/
@others
@language lua
@tabwidth -4
</t>
<t tx="leo.20210527223312.32">function sysCall_init() 
    -- User Parameters
    beltSpeed = 0.4
    T_insert = 1
    insertCoordinate = {-1.3,-0.5,0.25}
    goodPercentage = 0.19
    goodColor = {0.345,0.859,0.192}   
    -- Initialize auxiliary variables
    T_last_inserted = 0
    deltaTime = 0
    hasStopped = false
    boxList = {}
    boxDummyList = {}
    boolList = {}
    -- Initialize handles, set beltSpeed
    box = sim.getObjectHandle("Box")
    boxDummy = sim.getObjectHandle("BoxDummy")
    forwarder=sim.getObjectHandle('ConveyorBelt_forwarder')    
    proximity = sim.getObjectHandle("Proximity_sensor_belt1")
    belt2script = sim.getScriptHandle("customizableConveyor")
    sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
    -- Insert the first box during initializiation
    insertBox()
    -- Get handles and postions of dummies
    targetDummy = sim.getObjectHandle("Target")
    idlePos = sim.getObjectPosition(targetDummy,-1)
    idleOrient = sim.getObjectOrientation(targetDummy,-1)
    releasePosHandle = sim.getObjectHandle("releasePos")
    releasePos = sim.getObjectPosition(releasePosHandle,-1)
    releaseOrient = sim.getObjectOrientation(releasePosHandle,-1)
    -- Get release path handle
    releasePath = createPath("releasePath",idlePos,idleOrient,releasePos,releaseOrient)
    -- Get robot script handle
    robotScriptHandle = sim.getScriptHandle("LBR_iiwa_14_R820")
    sim.setScriptVariable("releasePath",robotScriptHandle,releasePath)
    -- Create "Dummy Path" (will be removed)
    path = sim.createPath(1);
    sim.setObjectName(path,"pickupPath")
end
</t>
<t tx="leo.20210527223312.33">function sysCall_cleanup() 
end 
</t>
<t tx="leo.20210527223312.34">function sysCall_actuation() 
    beltVelocity=sim.getScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity")
    -- Here we "fake" the transportation pads with a single static rectangle that we dynamically reset
    -- at each simulation pass (while not forgetting to set its initial velocity vector) :
    relativeLinearVelocity={beltVelocity,0,0}
    -- Reset the dynamic rectangle from the simulation (it will be removed and added again)
    sim.resetDynamicObject(forwarder)
    -- Compute the absolute velocity vector:
    m=sim.getObjectMatrix(forwarder,-1)
    m[4]=0 -- Make sure the translation component is discarded
    m[8]=0 -- Make sure the translation component is discarded
    m[12]=0 -- Make sure the translation component is discarded
    absoluteLinearVelocity=sim.multiplyVector(m,relativeLinearVelocity)
    -- Now set the initial velocity of the dynamic rectangle:
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_x,absoluteLinearVelocity[1])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_y,absoluteLinearVelocity[2])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_z,absoluteLinearVelocity[3])
end 
</t>
<t tx="leo.20210527223312.35">function sysCall_sensing() 
    -- Read Proximity sensor (0= nothing detected, 1 = object detected)
    local res = sim.readProximitySensor(proximity)
    -- Check if possible to insert an new box
    if (sim.getSimulationTime()-T_last_inserted &gt; T_insert) and not hasStopped then
        insertBox()
    end
    -- If proximity sensor detects an object, stop the belt, stop inserting objects
    if res == 1 and not hasStopped then
        if boolList[1] then
            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)
            deltaTime = sim.getSimulationTime()-T_last_inserted
            hasStopped = true
        -- Generate new pickupPath
            updatePickupPath(boxDummyList[1])
        -- Remove first object and dummy handle from table
            objs = removeFirstObject()
        -- Set pickupDummy-handle in robot script
            sim.setScriptVariable("pickupDummy",robotScriptHandle,objs[2])
        -- Set a signal such that robot knows that object is available
            sim.setIntegerSignal("objectAvailable",1)
        else
            local box = table.remove(boxList,1)
            local boxDummy = table.remove(boxDummyList,1)
            table.remove(boolList,1)
            sim.removeObject(box)
            sim.removeObject(boxDummy)
        end
    end
    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting
    if res == 0 and hasStopped then
        sim.clearIntegerSignal("objectAvailable")
        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
        hasStopped = false
        T_last_inserted = sim.getSimulationTime()-deltaTime
    end
end
</t>
<t tx="leo.20210527223312.36">function removeFirstObject()
    -- Obtain handles by removing from tables
    local box = table.remove(boxList,1)
    local boxDummy = table.remove(boxDummyList,1)
    table.remove(boolList,1)
    -- Add handles to the belt2 tables
    sim.callScriptFunction("addObject",belt2script,{box,boxDummy})
    -- Return handles
    return {box,boxDummy}
end
</t>
<t tx="leo.20210527223312.37">function insertBox()
    -- Generate random numbers
    local rand1 = math.random()
    local rand2 = math.random()
    local rand3 = math.random()
    -- Generate random disturbances on position and orientation
    local dx = (2*rand1-1)*0.1
    local dy = (2*rand2-1)*0.1
    local dphi = (2*rand3-1)*0.5
    local disturbedCoordinates = {0,0,0}
    disturbedCoordinates[1] = insertCoordinate[1]+dx
    disturbedCoordinates[2] = insertCoordinate[2]+dy
    disturbedCoordinates[3] = insertCoordinate[3]
    -- Copy and paste box and boxDummy
    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)
    -- Update last inserted box time
    T_last_inserted = sim.getSimulationTime()
    -- Move and rotate
    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)
    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})
    -- Store handles to boxes and dummies
    table.insert(boxList,insertedObjects[1])
    table.insert(boxDummyList,insertedObjects[2]) 
    -- Decide if object is good or bad
    local decision = math.random() 
    if decision &lt;= goodPercentage then
    -- Object is good, assign goodColor
        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)
        table.insert(boolList,true)
    else
    -- Object is bad, assign random color
        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})
        table.insert(boolList,false)
    end
end
</t>
<t tx="leo.20210527223312.38">function createPath(name,startPoint,startOrient,endPoint,endOrient)
    -- Create Path Object
    local path = sim.createPath(1)
    -- Create buffer variables
    local buffer = {startPoint[1],startPoint[2],startPoint[3],startOrient[1],startOrient[2],startOrient[3], 1,0,0,0,0,
                    endPoint[1],endPoint[2],endPoint[3],endOrient[1],endOrient[2],endOrient[3],             1,0,0,0,0}
    -- Insert 2 control points (start and endpoint)
    sim.insertPathCtrlPoints(path,0,0,2,buffer)
    -- Rename the object
    sim.setObjectName(path,name)
    -- Return handle to path
    return path
end
</t>
<t tx="leo.20210527223312.39">function updatePickupPath(dummy)
    -- Obtain handle to last pickupPath
    local path = sim.getObjectHandle("pickupPath")
    -- Remove the path
    sim.removeObject(path)
    -- Obtain position of dummy to be reached
    local dummyPos = sim.getObjectPosition(dummy,-1)
    -- Obtain orientation of dummy to be reached
    local dummyOrient = sim.getObjectOrientation(dummy,-1)
    -- Create new path
    createPath("pickupPath",idlePos,idleOrient,dummyPos,dummyOrient)
end
</t>
<t tx="leo.20210527223312.4">@path ./Tutorial1/
@others
@language lua
@tabwidth -4
</t>
<t tx="leo.20210527223312.40">@path ./Tutorial2/
@others
@language lua
@tabwidth -4
</t>
<t tx="leo.20210527223312.41">function sysCall_init() 
    -- User Parameters
    beltSpeed = 0.4
    T_insert = 1
    insertCoordinate = {-1.3,-0.5,0.25}
    goodPercentage = 0.19
    goodColor = {0.345,0.859,0.192}   
    -- Initialize auxiliary variables
    T_last_inserted = 0
    deltaTime = 0
    hasStopped = false
    boxList = {}
    boxDummyList = {}
    boolList = {}
    -- Initialize handles, set beltSpeed
    box = sim.getObjectHandle("Box")
    boxDummy = sim.getObjectHandle("BoxDummy")
    forwarder=sim.getObjectHandle('ConveyorBelt_forwarder')    
    proximity = sim.getObjectHandle("Proximity_sensor_belt1")
    belt2script = sim.getScriptHandle("customizableConveyor")
    sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
    -- Insert the first box during initializiation
    insertBox()
    -- Get handles and postions of dummies
--    targetDummy = sim.getObjectHandle("Target")
--    idlePos = sim.getObjectPosition(targetDummy,-1)
--    idleOrient = sim.getObjectOrientation(targetDummy,-1)
--    releasePosHandle = sim.getObjectHandle("releasePos")
--    releasePos = sim.getObjectPosition(releasePosHandle,-1)
--    releaseOrient = sim.getObjectOrientation(releasePosHandle,-1)
    -- Get release path handle
--    releasePath = createPath("releasePath",idlePos,idleOrient,releasePos,releaseOrient)
    -- Get robot script handle
--    robotScriptHandle = sim.getScriptHandle("LBR_iiwa_14_R820")
--    sim.setScriptVariable("releasePath",robotScriptHandle,releasePath)
    -- Create "Dummy Path" (will be removed)
--    path = sim.createPath(1);
--    sim.setObjectName(path,"pickupPath")
end
</t>
<t tx="leo.20210527223312.42">function sysCall_cleanup() 
end 
</t>
<t tx="leo.20210527223312.43">function sysCall_actuation() 
    beltVelocity=sim.getScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity")
    -- Here we "fake" the transportation pads with a single static rectangle that we dynamically reset
    -- at each simulation pass (while not forgetting to set its initial velocity vector) :
    relativeLinearVelocity={beltVelocity,0,0}
    -- Reset the dynamic rectangle from the simulation (it will be removed and added again)
    sim.resetDynamicObject(forwarder)
    -- Compute the absolute velocity vector:
    m=sim.getObjectMatrix(forwarder,-1)
    m[4]=0 -- Make sure the translation component is discarded
    m[8]=0 -- Make sure the translation component is discarded
    m[12]=0 -- Make sure the translation component is discarded
    absoluteLinearVelocity=sim.multiplyVector(m,relativeLinearVelocity)
    -- Now set the initial velocity of the dynamic rectangle:
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_x,absoluteLinearVelocity[1])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_y,absoluteLinearVelocity[2])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_z,absoluteLinearVelocity[3])
end 
</t>
<t tx="leo.20210527223312.44">function sysCall_sensing() 
    -- Read Proximity sensor (0= nothing detected, 1 = object detected)
    local res = sim.readProximitySensor(proximity)
    -- Check if possible to insert an new box
    if (sim.getSimulationTime()-T_last_inserted &gt; T_insert) and not hasStopped then
        insertBox()
    end
    -- If proximity sensor detects an object, stop the belt, stop inserting objects
    if res == 1 and not hasStopped then
        if boolList[1] then
            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)
            deltaTime = sim.getSimulationTime()-T_last_inserted
            hasStopped = true
        -- Generate new pickupPath
--            updatePickupPath(boxDummyList[1])
        -- Remove first object and dummy handle from table
--            objs = removeFirstObject()
        -- Set pickupDummy-handle in robot script
--            sim.setScriptVariable("pickupDummy",robotScriptHandle,objs[2])
        -- Set a signal such that robot knows that object is available
--            sim.setIntegerSignal("objectAvailable",1)
        else
            local box = table.remove(boxList,1)
            local boxDummy = table.remove(boxDummyList,1)
            table.remove(boolList,1)
            sim.removeObject(box)
            sim.removeObject(boxDummy)
        end
    end
    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting
    if res == 0 and hasStopped then
--        sim.clearIntegerSignal("objectAvailable")
        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
        hasStopped = false
        T_last_inserted = sim.getSimulationTime()-deltaTime
    end
end
</t>
<t tx="leo.20210527223312.45">function removeFirstObject()
    -- Obtain handles by removing from tables
--    local box = table.remove(boxList,1)
--    local boxDummy = table.remove(boxDummyList,1)
--    table.remove(boolList,1)
    -- Add handles to the belt2 tables
--    sim.callScriptFunction("addObject",belt2script,{box,boxDummy})
    -- Return handles
--    return {box,boxDummy}
end
</t>
<t tx="leo.20210527223312.46">function insertBox()
    -- Generate random numbers
    local rand1 = math.random()
    local rand2 = math.random()
    local rand3 = math.random()
    -- Generate random disturbances on position and orientation
    local dx = (2*rand1-1)*0.1
    local dy = (2*rand2-1)*0.1
    local dphi = (2*rand3-1)*0.5
    local disturbedCoordinates = {0,0,0}
    disturbedCoordinates[1] = insertCoordinate[1]+dx
    disturbedCoordinates[2] = insertCoordinate[2]+dy
    disturbedCoordinates[3] = insertCoordinate[3]
    -- Copy and paste box and boxDummy
    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)
    -- Update last inserted box time
    T_last_inserted = sim.getSimulationTime()
    -- Move and rotate
    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)
    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})
    -- Store handles to boxes and dummies
    table.insert(boxList,insertedObjects[1])
    table.insert(boxDummyList,insertedObjects[2]) 
    -- Decide if object is good or bad
    local decision = math.random() 
    if decision &lt;= goodPercentage then
    -- Object is good, assign goodColor
        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)
        table.insert(boolList,true)
    else
    -- Object is bad, assign random color
        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})
        table.insert(boolList,false)
    end
end
</t>
<t tx="leo.20210527223312.47">function createPath(name,startPoint,startOrient,endPoint,endOrient)
    -- Create Path Object
--    local path = sim.createPath(1)
    -- Create buffer variables
--    local buffer = {startPoint[1],startPoint[2],startPoint[3],startOrient[1],startOrient[2],startOrient[3], 1,0,0,0,0,
--                    endPoint[1],endPoint[2],endPoint[3],endOrient[1],endOrient[2],endOrient[3],             1,0,0,0,0}
    -- Insert 2 control points (start and endpoint)
--    sim.insertPathCtrlPoints(path,0,0,2,buffer)
    -- Rename the object
--    sim.setObjectName(path,name)
    -- Return handle to path
--    return path
end
</t>
<t tx="leo.20210527223312.48">function updatePickupPath(dummy)
    -- Obtain handle to last pickupPath
--    local path = sim.getObjectHandle("pickupPath")
    -- Remove the path
--    sim.removeObject(path)
    -- Obtain position of dummy to be reached
--    local dummyPos = sim.getObjectPosition(dummy,-1)
    -- Obtain orientation of dummy to be reached
--    local dummyOrient = sim.getObjectOrientation(dummy,-1)
    -- Create new path
--    createPath("pickupPath",idlePos,idleOrient,dummyPos,dummyOrient)
end
</t>
<t tx="leo.20210527223312.49">@path ./Tutorial2/
@others
@language lua
@tabwidth -4
</t>
<t tx="leo.20210527223312.5">function sysCall_init() 
    -- User Parameters
    beltSpeed = 0.4
    T_insert = 1
    insertCoordinate = {-1.3,-0.5,0.25}
    goodPercentage = 0.19
    goodColor = {0.345,0.859,0.192}   
    -- Initialize auxiliary variables
    T_last_inserted = 0
    deltaTime = 0
    hasStopped = false
    boxList = {}
    boxDummyList = {}
    boolList = {}
    -- Initialize handles, set beltSpeed
    box = sim.getObjectHandle("Box")
    boxDummy = sim.getObjectHandle("BoxDummy")
    forwarder=sim.getObjectHandle('ConveyorBelt_forwarder')    
    proximity = sim.getObjectHandle("Proximity_sensor_belt1")
    belt2script = sim.getScriptHandle("customizableConveyor")
    sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
    -- Insert the first box during initializiation
    insertBox()
end
</t>
<t tx="leo.20210527223312.50">function sysCall_init() 
    -- Parameters
    beltSpeed = 0.1
    -- Initialize auxiliary variables
    boxList = {}
    boxDummyList = {}
    -- Get object and script handles
    forwarder=sim.getObjectHandle('customizableConveyor_forwarder')
    textureShape=sim.getObjectHandle('customizableConveyor_tableTop')
    proximity1 = sim.getObjectHandle("Proximity_sensor_belt2_1")
    proximity2 = sim.getObjectHandle("Proximity_sensor_belt2_2")
    belt1_script = sim.getScriptHandle("ConveyorBelt")
    -- Set belt2 speed
    sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
end
</t>
<t tx="leo.20210527223312.51">function sysCall_cleanup() 
end 
</t>
<t tx="leo.20210527223312.52">function sysCall_actuation() 
--- THIS IS NOT PART OF THE TUTORIAL. IT COMES ALREADY WITH THE CONVEYOR BELT!
--- DO NOT MODIFY THIS FUNCTION!
    beltVelocity=sim.getScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity")
    -- We move the texture attached to the conveyor belt to give the impression of movement:
    t=sim.getSimulationTime()
    sim.setObjectFloatParameter(textureShape,sim.shapefloatparam_texture_x,t*beltVelocity)
    -- Here we "fake" the transportation pads with a single static rectangle that we dynamically reset
    -- at each simulation pass (while not forgetting to set its initial velocity vector) :
    relativeLinearVelocity={beltVelocity,0,0}
    -- Reset the dynamic rectangle from the simulation (it will be removed and added again)
    sim.resetDynamicObject(forwarder)
    -- Compute the absolute velocity vector:
    m=sim.getObjectMatrix(forwarder,-1)
    m[4]=0 -- Make sure the translation component is discarded
    m[8]=0 -- Make sure the translation component is discarded
    m[12]=0 -- Make sure the translation component is discarded
    absoluteLinearVelocity=sim.multiplyVector(m,relativeLinearVelocity)
    -- Now set the initial velocity of the dynamic rectangle:
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_x,absoluteLinearVelocity[1])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_y,absoluteLinearVelocity[2])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_z,absoluteLinearVelocity[3])
end 
</t>
<t tx="leo.20210527223312.53">function sysCall_sensing()
    -- Read proximity sensors (0 = no detection, 1 = detected object)
    local prox1 = sim.readProximitySensor(proximity1)
    local prox2 = sim.readProximitySensor(proximity2)
    -- Start belt if object detectet by prox1, stop belt if no objet at prox2
    if prox1==1 then
        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
    else
        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)
    end
    -- Remove object if detected by prox2
    if prox2 == 1 then
        removeObject()
    end
end
</t>
<t tx="leo.20210527223312.54">function addObject(obj)
    -- Insert box and boxDummy handle at the end of tables
    table.insert(boxList,obj[1])
    table.insert(boxDummyList,obj[2])
end
</t>
<t tx="leo.20210527223312.55">function removeObject()
    -- Remove first objects from tables, then remove objects from scene
    -- Original 
    sim.removeObject(table.remove(boxList,1))
    sim.removeObject(table.remove(boxDummyList,1))
end
</t>
<t tx="leo.20210527223312.56">@path ./Tutorial2/
-- Velocity and acceleration on path
nominalVel = 0.25
nominalAcc = 0.5
-- Get object and script handles
target = sim.getObjectHandle("Target")
connector = sim.getObjectHandle("Connector")
belt1_script = sim.getScriptHandle("ConveyorBelt")
-- Initialize variables
pickupDummy = -1
releasePath = -1
@others
@language lua
@tabwidth -4
</t>
<t tx="leo.20210527223312.57">function sysCall_threadmain()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
    -- Pause script until a signal is applied on integer signal "objectAvailable"
        sim.waitForSignal("objectAvailable")
    -- Obtain current pickupPath-handle
        path = sim.getObjectHandle("pickupPath")
    -- Follow the pickupPath
        sim.followPath(target,path,3,0,nominalVel,nominalAcc)
    -- Wait one second to mimic a connection process
        sim.wait(1)
    -- Connect the connector to pickupDummy
        sim.setLinkDummy(connector,pickupDummy)
        -- Set link type
        sim.setObjectInt32Parameter(connector,sim.dummyintparam_link_type,sim.dummy_linktype_dynamics_loop_closure)
    -- Follow back the pickup path
        sim.followPath(target,path,3,1,-nominalVel,-nominalAcc)
    -- Follow release path
        sim.followPath(target,releasePath,3,0,nominalVel,nominalAcc)
    -- Wait 0.25 seconds 
        sim.wait(0.25)
    -- Disconnect pickupDummy from connector
        sim.setLinkDummy(connector,-1)
    -- Follow back releasePath to "idle" position
        sim.followPath(target,releasePath,3,1,-nominalVel,-nominalAcc)
    end
end
</t>
<t tx="leo.20210527223312.58">@path ./Tutorial2/
-- Velocity and acceleration on path
--nominalVel = 0.25
--nominalAcc = 0.5
-- Get object and script handles
--target = sim.getObjectHandle("Target")
--connector = sim.getObjectHandle("Connector")
--belt1_script = sim.getScriptHandle("ConveyorBelt")
-- Initialize variables
--pickupDummy = -1
--releasePath = -1
@others
@language lua
@tabwidth -4
</t>
<t tx="leo.20210527223312.59">function sysCall_threadmain()
--    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
    -- Pause script until a signal is applied on integer signal "objectAvailable"
--        sim.waitForSignal("objectAvailable")
    -- Obtain current pickupPath-handle
--        path = sim.getObjectHandle("pickupPath")
    -- Follow the pickupPath
--        sim.followPath(target,path,3,0,nominalVel,nominalAcc)
    -- Wait one second to mimic a connection process
--        sim.wait(1)
    -- Connect the connector to pickupDummy
--        sim.setLinkDummy(connector,pickupDummy)
        -- Set link type
--        sim.setObjectInt32Parameter(connector,sim.dummyintparam_link_type,sim.dummy_linktype_dynamics_loop_closure)
    -- Follow back the pickup path
--        sim.followPath(target,path,3,1,-nominalVel,-nominalAcc)
    -- Follow release path
--        sim.followPath(target,releasePath,3,0,nominalVel,nominalAcc)
    -- Wait 0.25 seconds 
--        sim.wait(0.25)
    -- Disconnect pickupDummy from connector
--        sim.setLinkDummy(connector,-1)
    -- Follow back releasePath to "idle" position
--        sim.followPath(target,releasePath,3,1,-nominalVel,-nominalAcc)
--    end
end
</t>
<t tx="leo.20210527223312.6">function sysCall_cleanup() 
end 
</t>
<t tx="leo.20210527223312.7">function sysCall_actuation() 
    beltVelocity=sim.getScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity")
    -- Here we "fake" the transportation pads with a single static rectangle that we dynamically reset
    -- at each simulation pass (while not forgetting to set its initial velocity vector) :
    relativeLinearVelocity={beltVelocity,0,0}
    -- Reset the dynamic rectangle from the simulation (it will be removed and added again)
    sim.resetDynamicObject(forwarder)
    -- Compute the absolute velocity vector:
    m=sim.getObjectMatrix(forwarder,-1)
    m[4]=0 -- Make sure the translation component is discarded
    m[8]=0 -- Make sure the translation component is discarded
    m[12]=0 -- Make sure the translation component is discarded
    absoluteLinearVelocity=sim.multiplyVector(m,relativeLinearVelocity)
    -- Now set the initial velocity of the dynamic rectangle:
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_x,absoluteLinearVelocity[1])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_y,absoluteLinearVelocity[2])
    sim.setObjectFloatParameter(forwarder,sim.shapefloatparam_init_velocity_z,absoluteLinearVelocity[3])
end 
</t>
<t tx="leo.20210527223312.8">function sysCall_sensing() 
    -- Read Proximity sensor (0= nothing detected, 1 = object detected)
    local res = sim.readProximitySensor(proximity)
    -- Check if possible to insert an new box
    if (sim.getSimulationTime()-T_last_inserted &gt; T_insert) and not hasStopped then
        insertBox()
    end
    -- If proximity sensor detects an object, stop the belt, stop inserting objects
    if res == 1 and not hasStopped then
        if boolList[1] then
            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)
            deltaTime = sim.getSimulationTime()-T_last_inserted
            hasStopped = true
        else
            local box = table.remove(boxList,1)
            local boxDummy = table.remove(boxDummyList,1)
            table.remove(boolList,1)
            sim.removeObject(box)
            sim.removeObject(boxDummy)
        end
    end
    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting
    if res == 0 and hasStopped then
        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)
        hasStopped = false
        T_last_inserted = sim.getSimulationTime()-deltaTime
    end
end
</t>
<t tx="leo.20210527223312.9">function insertBox()
    -- Generate random numbers
    local rand1 = math.random()
    local rand2 = math.random()
    local rand3 = math.random()
    -- Generate random disturbances on position and orientation
    local dx = (2*rand1-1)*0.1
    local dy = (2*rand2-1)*0.1
    local dphi = (2*rand3-1)*0.5
    local disturbedCoordinates = {0,0,0}
    disturbedCoordinates[1] = insertCoordinate[1]+dx
    disturbedCoordinates[2] = insertCoordinate[2]+dy
    disturbedCoordinates[3] = insertCoordinate[3]
    -- Copy and paste box and boxDummy
    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)
    -- Update last inserted box time
    T_last_inserted = sim.getSimulationTime()
    -- Move and rotate
    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)
    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})
    -- Store handles to boxes and dummies
    table.insert(boxList,insertedObjects[1])
    table.insert(boxDummyList,insertedObjects[2]) 
    -- Decide if object is good or bad
    local decision = math.random() 
    if decision &lt;= goodPercentage then
    -- Object is good, assign goodColor
        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)
        table.insert(boolList,true)
    else
    -- Object is bad, assign random color
        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})
        table.insert(boolList,false)
    end
end
</t>
</tnodes>
</leo_file>
